# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from explorer_client.configuration import Configuration


class CompiledGraphData(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'progress': 'GraphDataProgress',
        'project_id': 'int',
        'graph_infos': 'list[GraphInfo]',
        'graph_datas': 'list[GraphData]',
        'topic_graph_infos': 'list[TopicGraphInfo]',
        'topic_graphs_datas': 'list[CompiledTopicGraphData]'
    }

    attribute_map = {
        'progress': 'progress',
        'project_id': 'projectId',
        'graph_infos': 'graphInfos',
        'graph_datas': 'graphDatas',
        'topic_graph_infos': 'topicGraphInfos',
        'topic_graphs_datas': 'topicGraphsDatas'
    }

    def __init__(self, progress=None, project_id=None, graph_infos=None, graph_datas=None, topic_graph_infos=None, topic_graphs_datas=None, local_vars_configuration=None):  # noqa: E501
        """CompiledGraphData - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._progress = None
        self._project_id = None
        self._graph_infos = None
        self._graph_datas = None
        self._topic_graph_infos = None
        self._topic_graphs_datas = None
        self.discriminator = None

        if progress is not None:
            self.progress = progress
        if project_id is not None:
            self.project_id = project_id
        if graph_infos is not None:
            self.graph_infos = graph_infos
        if graph_datas is not None:
            self.graph_datas = graph_datas
        if topic_graph_infos is not None:
            self.topic_graph_infos = topic_graph_infos
        if topic_graphs_datas is not None:
            self.topic_graphs_datas = topic_graphs_datas

    @property
    def progress(self):
        """Gets the progress of this CompiledGraphData.  # noqa: E501


        :return: The progress of this CompiledGraphData.  # noqa: E501
        :rtype: GraphDataProgress
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this CompiledGraphData.


        :param progress: The progress of this CompiledGraphData.  # noqa: E501
        :type progress: GraphDataProgress
        """

        self._progress = progress

    @property
    def project_id(self):
        """Gets the project_id of this CompiledGraphData.  # noqa: E501


        :return: The project_id of this CompiledGraphData.  # noqa: E501
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """Sets the project_id of this CompiledGraphData.


        :param project_id: The project_id of this CompiledGraphData.  # noqa: E501
        :type project_id: int
        """

        self._project_id = project_id

    @property
    def graph_infos(self):
        """Gets the graph_infos of this CompiledGraphData.  # noqa: E501


        :return: The graph_infos of this CompiledGraphData.  # noqa: E501
        :rtype: list[GraphInfo]
        """
        return self._graph_infos

    @graph_infos.setter
    def graph_infos(self, graph_infos):
        """Sets the graph_infos of this CompiledGraphData.


        :param graph_infos: The graph_infos of this CompiledGraphData.  # noqa: E501
        :type graph_infos: list[GraphInfo]
        """

        self._graph_infos = graph_infos

    @property
    def graph_datas(self):
        """Gets the graph_datas of this CompiledGraphData.  # noqa: E501


        :return: The graph_datas of this CompiledGraphData.  # noqa: E501
        :rtype: list[GraphData]
        """
        return self._graph_datas

    @graph_datas.setter
    def graph_datas(self, graph_datas):
        """Sets the graph_datas of this CompiledGraphData.


        :param graph_datas: The graph_datas of this CompiledGraphData.  # noqa: E501
        :type graph_datas: list[GraphData]
        """

        self._graph_datas = graph_datas

    @property
    def topic_graph_infos(self):
        """Gets the topic_graph_infos of this CompiledGraphData.  # noqa: E501


        :return: The topic_graph_infos of this CompiledGraphData.  # noqa: E501
        :rtype: list[TopicGraphInfo]
        """
        return self._topic_graph_infos

    @topic_graph_infos.setter
    def topic_graph_infos(self, topic_graph_infos):
        """Sets the topic_graph_infos of this CompiledGraphData.


        :param topic_graph_infos: The topic_graph_infos of this CompiledGraphData.  # noqa: E501
        :type topic_graph_infos: list[TopicGraphInfo]
        """

        self._topic_graph_infos = topic_graph_infos

    @property
    def topic_graphs_datas(self):
        """Gets the topic_graphs_datas of this CompiledGraphData.  # noqa: E501


        :return: The topic_graphs_datas of this CompiledGraphData.  # noqa: E501
        :rtype: list[CompiledTopicGraphData]
        """
        return self._topic_graphs_datas

    @topic_graphs_datas.setter
    def topic_graphs_datas(self, topic_graphs_datas):
        """Sets the topic_graphs_datas of this CompiledGraphData.


        :param topic_graphs_datas: The topic_graphs_datas of this CompiledGraphData.  # noqa: E501
        :type topic_graphs_datas: list[CompiledTopicGraphData]
        """

        self._topic_graphs_datas = topic_graphs_datas

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompiledGraphData):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CompiledGraphData):
            return True

        return self.to_dict() != other.to_dict()
