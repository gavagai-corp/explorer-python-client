# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p><p>Use <code>https://api.gavagai.se/explorer/v1/</code> as the Base URL for each of these API endpoints</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from explorer_client.configuration import Configuration


class CreateGraphRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'title': 'str',
        'description': 'str',
        'visible': 'bool',
        'type': 'str',
        'order': 'int',
        'width': 'str'
    }

    attribute_map = {
        'title': 'title',
        'description': 'description',
        'visible': 'visible',
        'type': 'type',
        'order': 'order',
        'width': 'width'
    }

    def __init__(self, title=None, description=None, visible=None, type=None, order=None, width=None, local_vars_configuration=None):  # noqa: E501
        """CreateGraphRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._title = None
        self._description = None
        self._visible = None
        self._type = None
        self._order = None
        self._width = None
        self.discriminator = None

        if title is not None:
            self.title = title
        if description is not None:
            self.description = description
        if visible is not None:
            self.visible = visible
        if type is not None:
            self.type = type
        if order is not None:
            self.order = order
        if width is not None:
            self.width = width

    @property
    def title(self):
        """Gets the title of this CreateGraphRequest.  # noqa: E501


        :return: The title of this CreateGraphRequest.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CreateGraphRequest.


        :param title: The title of this CreateGraphRequest.  # noqa: E501
        :type title: str
        """

        self._title = title

    @property
    def description(self):
        """Gets the description of this CreateGraphRequest.  # noqa: E501


        :return: The description of this CreateGraphRequest.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CreateGraphRequest.


        :param description: The description of this CreateGraphRequest.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def visible(self):
        """Gets the visible of this CreateGraphRequest.  # noqa: E501


        :return: The visible of this CreateGraphRequest.  # noqa: E501
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """Sets the visible of this CreateGraphRequest.


        :param visible: The visible of this CreateGraphRequest.  # noqa: E501
        :type visible: bool
        """

        self._visible = visible

    @property
    def type(self):
        """Gets the type of this CreateGraphRequest.  # noqa: E501


        :return: The type of this CreateGraphRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CreateGraphRequest.


        :param type: The type of this CreateGraphRequest.  # noqa: E501
        :type type: str
        """
        allowed_values = ["GROUPED_COMPARISON", "TIME_SERIES_COMPARISON", "AVERAGE_SCORE", "HIGH_IMPACT", "HIGH_IMPACT_ASSOCIATION", "AVERAGE_SCORE_MATRIX"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def order(self):
        """Gets the order of this CreateGraphRequest.  # noqa: E501


        :return: The order of this CreateGraphRequest.  # noqa: E501
        :rtype: int
        """
        return self._order

    @order.setter
    def order(self, order):
        """Sets the order of this CreateGraphRequest.


        :param order: The order of this CreateGraphRequest.  # noqa: E501
        :type order: int
        """

        self._order = order

    @property
    def width(self):
        """Gets the width of this CreateGraphRequest.  # noqa: E501


        :return: The width of this CreateGraphRequest.  # noqa: E501
        :rtype: str
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this CreateGraphRequest.


        :param width: The width of this CreateGraphRequest.  # noqa: E501
        :type width: str
        """
        allowed_values = ["HALF", "FULL"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and width not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `width` ({0}), must be one of {1}"  # noqa: E501
                .format(width, allowed_values)
            )

        self._width = width

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateGraphRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, CreateGraphRequest):
            return True

        return self.to_dict() != other.to_dict()
