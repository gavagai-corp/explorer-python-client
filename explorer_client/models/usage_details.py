# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from explorer_client.configuration import Configuration


class UsageDetails(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_usage': 'list[UsageDetail]',
        'total_project_slots_used': 'int',
        'total_credits_used': 'int',
        'total_projects_created': 'int'
    }

    attribute_map = {
        'user_usage': 'userUsage',
        'total_project_slots_used': 'totalProjectSlotsUsed',
        'total_credits_used': 'totalCreditsUsed',
        'total_projects_created': 'totalProjectsCreated'
    }

    def __init__(self, user_usage=None, total_project_slots_used=None, total_credits_used=None, total_projects_created=None, local_vars_configuration=None):  # noqa: E501
        """UsageDetails - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_usage = None
        self._total_project_slots_used = None
        self._total_credits_used = None
        self._total_projects_created = None
        self.discriminator = None

        if user_usage is not None:
            self.user_usage = user_usage
        if total_project_slots_used is not None:
            self.total_project_slots_used = total_project_slots_used
        if total_credits_used is not None:
            self.total_credits_used = total_credits_used
        if total_projects_created is not None:
            self.total_projects_created = total_projects_created

    @property
    def user_usage(self):
        """Gets the user_usage of this UsageDetails.  # noqa: E501


        :return: The user_usage of this UsageDetails.  # noqa: E501
        :rtype: list[UsageDetail]
        """
        return self._user_usage

    @user_usage.setter
    def user_usage(self, user_usage):
        """Sets the user_usage of this UsageDetails.


        :param user_usage: The user_usage of this UsageDetails.  # noqa: E501
        :type user_usage: list[UsageDetail]
        """

        self._user_usage = user_usage

    @property
    def total_project_slots_used(self):
        """Gets the total_project_slots_used of this UsageDetails.  # noqa: E501


        :return: The total_project_slots_used of this UsageDetails.  # noqa: E501
        :rtype: int
        """
        return self._total_project_slots_used

    @total_project_slots_used.setter
    def total_project_slots_used(self, total_project_slots_used):
        """Sets the total_project_slots_used of this UsageDetails.


        :param total_project_slots_used: The total_project_slots_used of this UsageDetails.  # noqa: E501
        :type total_project_slots_used: int
        """

        self._total_project_slots_used = total_project_slots_used

    @property
    def total_credits_used(self):
        """Gets the total_credits_used of this UsageDetails.  # noqa: E501


        :return: The total_credits_used of this UsageDetails.  # noqa: E501
        :rtype: int
        """
        return self._total_credits_used

    @total_credits_used.setter
    def total_credits_used(self, total_credits_used):
        """Sets the total_credits_used of this UsageDetails.


        :param total_credits_used: The total_credits_used of this UsageDetails.  # noqa: E501
        :type total_credits_used: int
        """

        self._total_credits_used = total_credits_used

    @property
    def total_projects_created(self):
        """Gets the total_projects_created of this UsageDetails.  # noqa: E501


        :return: The total_projects_created of this UsageDetails.  # noqa: E501
        :rtype: int
        """
        return self._total_projects_created

    @total_projects_created.setter
    def total_projects_created(self, total_projects_created):
        """Sets the total_projects_created of this UsageDetails.


        :param total_projects_created: The total_projects_created of this UsageDetails.  # noqa: E501
        :type total_projects_created: int
        """

        self._total_projects_created = total_projects_created

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsageDetails):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UsageDetails):
            return True

        return self.to_dict() != other.to_dict()
