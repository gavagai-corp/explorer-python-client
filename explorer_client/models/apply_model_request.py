# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p><p>Use <code>https://api.gavagai.se/explorer/v1/</code> as the Base URL for each of these API endpoints</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from explorer_client.configuration import Configuration


class ApplyModelRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'model_id': 'int',
        'version': 'int',
        'subscribe': 'bool',
        'translation_candidate_project_id': 'int'
    }

    attribute_map = {
        'model_id': 'modelId',
        'version': 'version',
        'subscribe': 'subscribe',
        'translation_candidate_project_id': 'translationCandidateProjectId'
    }

    def __init__(self, model_id=None, version=None, subscribe=None, translation_candidate_project_id=None, local_vars_configuration=None):  # noqa: E501
        """ApplyModelRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._model_id = None
        self._version = None
        self._subscribe = None
        self._translation_candidate_project_id = None
        self.discriminator = None

        if model_id is not None:
            self.model_id = model_id
        if version is not None:
            self.version = version
        if subscribe is not None:
            self.subscribe = subscribe
        if translation_candidate_project_id is not None:
            self.translation_candidate_project_id = translation_candidate_project_id

    @property
    def model_id(self):
        """Gets the model_id of this ApplyModelRequest.  # noqa: E501


        :return: The model_id of this ApplyModelRequest.  # noqa: E501
        :rtype: int
        """
        return self._model_id

    @model_id.setter
    def model_id(self, model_id):
        """Sets the model_id of this ApplyModelRequest.


        :param model_id: The model_id of this ApplyModelRequest.  # noqa: E501
        :type model_id: int
        """

        self._model_id = model_id

    @property
    def version(self):
        """Gets the version of this ApplyModelRequest.  # noqa: E501


        :return: The version of this ApplyModelRequest.  # noqa: E501
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ApplyModelRequest.


        :param version: The version of this ApplyModelRequest.  # noqa: E501
        :type version: int
        """

        self._version = version

    @property
    def subscribe(self):
        """Gets the subscribe of this ApplyModelRequest.  # noqa: E501


        :return: The subscribe of this ApplyModelRequest.  # noqa: E501
        :rtype: bool
        """
        return self._subscribe

    @subscribe.setter
    def subscribe(self, subscribe):
        """Sets the subscribe of this ApplyModelRequest.


        :param subscribe: The subscribe of this ApplyModelRequest.  # noqa: E501
        :type subscribe: bool
        """

        self._subscribe = subscribe

    @property
    def translation_candidate_project_id(self):
        """Gets the translation_candidate_project_id of this ApplyModelRequest.  # noqa: E501


        :return: The translation_candidate_project_id of this ApplyModelRequest.  # noqa: E501
        :rtype: int
        """
        return self._translation_candidate_project_id

    @translation_candidate_project_id.setter
    def translation_candidate_project_id(self, translation_candidate_project_id):
        """Sets the translation_candidate_project_id of this ApplyModelRequest.


        :param translation_candidate_project_id: The translation_candidate_project_id of this ApplyModelRequest.  # noqa: E501
        :type translation_candidate_project_id: int
        """

        self._translation_candidate_project_id = translation_candidate_project_id

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplyModelRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApplyModelRequest):
            return True

        return self.to_dict() != other.to_dict()
