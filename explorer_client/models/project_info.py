# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p><p>Use <code>https://api.gavagai.se/explorer/v1/</code> as the Base URL for each of these API endpoints</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from explorer_client.configuration import Configuration


class ProjectInfo(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'title': 'str',
        'rows': 'int',
        'created': 'int',
        'encoding': 'str',
        'status': 'str',
        'status_message': 'str',
        'headers': 'list[ColumnHeader]',
        'model': 'ModelInfo',
        'created_by': 'User'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'rows': 'rows',
        'created': 'created',
        'encoding': 'encoding',
        'status': 'status',
        'status_message': 'statusMessage',
        'headers': 'headers',
        'model': 'model',
        'created_by': 'createdBy'
    }

    def __init__(self, id=None, title=None, rows=None, created=None, encoding=None, status=None, status_message=None, headers=None, model=None, created_by=None, local_vars_configuration=None):  # noqa: E501
        """ProjectInfo - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._title = None
        self._rows = None
        self._created = None
        self._encoding = None
        self._status = None
        self._status_message = None
        self._headers = None
        self._model = None
        self._created_by = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if rows is not None:
            self.rows = rows
        if created is not None:
            self.created = created
        if encoding is not None:
            self.encoding = encoding
        if status is not None:
            self.status = status
        if status_message is not None:
            self.status_message = status_message
        if headers is not None:
            self.headers = headers
        if model is not None:
            self.model = model
        if created_by is not None:
            self.created_by = created_by

    @property
    def id(self):
        """Gets the id of this ProjectInfo.  # noqa: E501


        :return: The id of this ProjectInfo.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectInfo.


        :param id: The id of this ProjectInfo.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this ProjectInfo.  # noqa: E501


        :return: The title of this ProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ProjectInfo.


        :param title: The title of this ProjectInfo.  # noqa: E501
        :type title: str
        """

        self._title = title

    @property
    def rows(self):
        """Gets the rows of this ProjectInfo.  # noqa: E501


        :return: The rows of this ProjectInfo.  # noqa: E501
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this ProjectInfo.


        :param rows: The rows of this ProjectInfo.  # noqa: E501
        :type rows: int
        """

        self._rows = rows

    @property
    def created(self):
        """Gets the created of this ProjectInfo.  # noqa: E501


        :return: The created of this ProjectInfo.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this ProjectInfo.


        :param created: The created of this ProjectInfo.  # noqa: E501
        :type created: int
        """

        self._created = created

    @property
    def encoding(self):
        """Gets the encoding of this ProjectInfo.  # noqa: E501


        :return: The encoding of this ProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding):
        """Sets the encoding of this ProjectInfo.


        :param encoding: The encoding of this ProjectInfo.  # noqa: E501
        :type encoding: str
        """

        self._encoding = encoding

    @property
    def status(self):
        """Gets the status of this ProjectInfo.  # noqa: E501


        :return: The status of this ProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProjectInfo.


        :param status: The status of this ProjectInfo.  # noqa: E501
        :type status: str
        """
        allowed_values = ["INITIALIZING", "APPENDING", "EXPLORABLE", "ERROR", "DELETING", "ARCHIVED"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_message(self):
        """Gets the status_message of this ProjectInfo.  # noqa: E501


        :return: The status_message of this ProjectInfo.  # noqa: E501
        :rtype: str
        """
        return self._status_message

    @status_message.setter
    def status_message(self, status_message):
        """Sets the status_message of this ProjectInfo.


        :param status_message: The status_message of this ProjectInfo.  # noqa: E501
        :type status_message: str
        """

        self._status_message = status_message

    @property
    def headers(self):
        """Gets the headers of this ProjectInfo.  # noqa: E501


        :return: The headers of this ProjectInfo.  # noqa: E501
        :rtype: list[ColumnHeader]
        """
        return self._headers

    @headers.setter
    def headers(self, headers):
        """Sets the headers of this ProjectInfo.


        :param headers: The headers of this ProjectInfo.  # noqa: E501
        :type headers: list[ColumnHeader]
        """

        self._headers = headers

    @property
    def model(self):
        """Gets the model of this ProjectInfo.  # noqa: E501


        :return: The model of this ProjectInfo.  # noqa: E501
        :rtype: ModelInfo
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ProjectInfo.


        :param model: The model of this ProjectInfo.  # noqa: E501
        :type model: ModelInfo
        """

        self._model = model

    @property
    def created_by(self):
        """Gets the created_by of this ProjectInfo.  # noqa: E501


        :return: The created_by of this ProjectInfo.  # noqa: E501
        :rtype: User
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this ProjectInfo.


        :param created_by: The created_by of this ProjectInfo.  # noqa: E501
        :type created_by: User
        """

        self._created_by = created_by

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectInfo):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectInfo):
            return True

        return self.to_dict() != other.to_dict()
