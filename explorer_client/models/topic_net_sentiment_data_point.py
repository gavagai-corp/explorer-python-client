# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from explorer_client.configuration import Configuration


class TopicNetSentimentDataPoint(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'date': 'int',
        'document_count': 'int',
        'total_document_count': 'int',
        'net_sentiment_normalized': 'float',
        'net_sentiment': 'float',
        'tonalities': 'list[Tonality]'
    }

    attribute_map = {
        'date': 'date',
        'document_count': 'documentCount',
        'total_document_count': 'totalDocumentCount',
        'net_sentiment_normalized': 'netSentimentNormalized',
        'net_sentiment': 'netSentiment',
        'tonalities': 'tonalities'
    }

    def __init__(self, date=None, document_count=None, total_document_count=None, net_sentiment_normalized=None, net_sentiment=None, tonalities=None, local_vars_configuration=None):  # noqa: E501
        """TopicNetSentimentDataPoint - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._date = None
        self._document_count = None
        self._total_document_count = None
        self._net_sentiment_normalized = None
        self._net_sentiment = None
        self._tonalities = None
        self.discriminator = None

        if date is not None:
            self.date = date
        if document_count is not None:
            self.document_count = document_count
        if total_document_count is not None:
            self.total_document_count = total_document_count
        if net_sentiment_normalized is not None:
            self.net_sentiment_normalized = net_sentiment_normalized
        if net_sentiment is not None:
            self.net_sentiment = net_sentiment
        if tonalities is not None:
            self.tonalities = tonalities

    @property
    def date(self):
        """Gets the date of this TopicNetSentimentDataPoint.  # noqa: E501


        :return: The date of this TopicNetSentimentDataPoint.  # noqa: E501
        :rtype: int
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this TopicNetSentimentDataPoint.


        :param date: The date of this TopicNetSentimentDataPoint.  # noqa: E501
        :type date: int
        """

        self._date = date

    @property
    def document_count(self):
        """Gets the document_count of this TopicNetSentimentDataPoint.  # noqa: E501


        :return: The document_count of this TopicNetSentimentDataPoint.  # noqa: E501
        :rtype: int
        """
        return self._document_count

    @document_count.setter
    def document_count(self, document_count):
        """Sets the document_count of this TopicNetSentimentDataPoint.


        :param document_count: The document_count of this TopicNetSentimentDataPoint.  # noqa: E501
        :type document_count: int
        """

        self._document_count = document_count

    @property
    def total_document_count(self):
        """Gets the total_document_count of this TopicNetSentimentDataPoint.  # noqa: E501


        :return: The total_document_count of this TopicNetSentimentDataPoint.  # noqa: E501
        :rtype: int
        """
        return self._total_document_count

    @total_document_count.setter
    def total_document_count(self, total_document_count):
        """Sets the total_document_count of this TopicNetSentimentDataPoint.


        :param total_document_count: The total_document_count of this TopicNetSentimentDataPoint.  # noqa: E501
        :type total_document_count: int
        """

        self._total_document_count = total_document_count

    @property
    def net_sentiment_normalized(self):
        """Gets the net_sentiment_normalized of this TopicNetSentimentDataPoint.  # noqa: E501


        :return: The net_sentiment_normalized of this TopicNetSentimentDataPoint.  # noqa: E501
        :rtype: float
        """
        return self._net_sentiment_normalized

    @net_sentiment_normalized.setter
    def net_sentiment_normalized(self, net_sentiment_normalized):
        """Sets the net_sentiment_normalized of this TopicNetSentimentDataPoint.


        :param net_sentiment_normalized: The net_sentiment_normalized of this TopicNetSentimentDataPoint.  # noqa: E501
        :type net_sentiment_normalized: float
        """

        self._net_sentiment_normalized = net_sentiment_normalized

    @property
    def net_sentiment(self):
        """Gets the net_sentiment of this TopicNetSentimentDataPoint.  # noqa: E501


        :return: The net_sentiment of this TopicNetSentimentDataPoint.  # noqa: E501
        :rtype: float
        """
        return self._net_sentiment

    @net_sentiment.setter
    def net_sentiment(self, net_sentiment):
        """Sets the net_sentiment of this TopicNetSentimentDataPoint.


        :param net_sentiment: The net_sentiment of this TopicNetSentimentDataPoint.  # noqa: E501
        :type net_sentiment: float
        """

        self._net_sentiment = net_sentiment

    @property
    def tonalities(self):
        """Gets the tonalities of this TopicNetSentimentDataPoint.  # noqa: E501


        :return: The tonalities of this TopicNetSentimentDataPoint.  # noqa: E501
        :rtype: list[Tonality]
        """
        return self._tonalities

    @tonalities.setter
    def tonalities(self, tonalities):
        """Sets the tonalities of this TopicNetSentimentDataPoint.


        :param tonalities: The tonalities of this TopicNetSentimentDataPoint.  # noqa: E501
        :type tonalities: list[Tonality]
        """

        self._tonalities = tonalities

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TopicNetSentimentDataPoint):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TopicNetSentimentDataPoint):
            return True

        return self.to_dict() != other.to_dict()
