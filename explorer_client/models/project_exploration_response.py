# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p><p>Use <code>https://api.gavagai.se/explorer/v1/</code> as the Base URL for each of these API endpoints</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from explorer_client.configuration import Configuration


class ProjectExplorationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'status': 'ExplorationStatus',
        'groups': 'list[TopicGroupResponse]',
        'ignore_terms': 'list[str]',
        'language': 'str',
        'column_header_id': 'int',
        'filters': 'list[Filter]',
        'concept_filter': 'ConceptFilter',
        'tones': 'list[str]',
        'total_document_count': 'int',
        'outdated': 'bool',
        'tonality_customization_id': 'int',
        'coverage_statistics': 'CoverageStatistics',
        'project_tonalities': 'ProjectDocumentTonalities',
        'filter_by_language': 'bool',
        'query_filter': 'bool',
        'drivers': 'list[DriverResponse]'
    }

    attribute_map = {
        'status': 'status',
        'groups': 'groups',
        'ignore_terms': 'ignoreTerms',
        'language': 'language',
        'column_header_id': 'columnHeaderId',
        'filters': 'filters',
        'concept_filter': 'conceptFilter',
        'tones': 'tones',
        'total_document_count': 'totalDocumentCount',
        'outdated': 'outdated',
        'tonality_customization_id': 'tonalityCustomizationId',
        'coverage_statistics': 'coverageStatistics',
        'project_tonalities': 'projectTonalities',
        'filter_by_language': 'filterByLanguage',
        'query_filter': 'queryFilter',
        'drivers': 'drivers'
    }

    def __init__(self, status=None, groups=None, ignore_terms=None, language=None, column_header_id=None, filters=None, concept_filter=None, tones=None, total_document_count=None, outdated=None, tonality_customization_id=None, coverage_statistics=None, project_tonalities=None, filter_by_language=None, query_filter=None, drivers=None, local_vars_configuration=None):  # noqa: E501
        """ProjectExplorationResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._status = None
        self._groups = None
        self._ignore_terms = None
        self._language = None
        self._column_header_id = None
        self._filters = None
        self._concept_filter = None
        self._tones = None
        self._total_document_count = None
        self._outdated = None
        self._tonality_customization_id = None
        self._coverage_statistics = None
        self._project_tonalities = None
        self._filter_by_language = None
        self._query_filter = None
        self._drivers = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if groups is not None:
            self.groups = groups
        if ignore_terms is not None:
            self.ignore_terms = ignore_terms
        if language is not None:
            self.language = language
        if column_header_id is not None:
            self.column_header_id = column_header_id
        if filters is not None:
            self.filters = filters
        if concept_filter is not None:
            self.concept_filter = concept_filter
        if tones is not None:
            self.tones = tones
        if total_document_count is not None:
            self.total_document_count = total_document_count
        if outdated is not None:
            self.outdated = outdated
        if tonality_customization_id is not None:
            self.tonality_customization_id = tonality_customization_id
        if coverage_statistics is not None:
            self.coverage_statistics = coverage_statistics
        if project_tonalities is not None:
            self.project_tonalities = project_tonalities
        if filter_by_language is not None:
            self.filter_by_language = filter_by_language
        if query_filter is not None:
            self.query_filter = query_filter
        if drivers is not None:
            self.drivers = drivers

    @property
    def status(self):
        """Gets the status of this ProjectExplorationResponse.  # noqa: E501


        :return: The status of this ProjectExplorationResponse.  # noqa: E501
        :rtype: ExplorationStatus
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ProjectExplorationResponse.


        :param status: The status of this ProjectExplorationResponse.  # noqa: E501
        :type status: ExplorationStatus
        """

        self._status = status

    @property
    def groups(self):
        """Gets the groups of this ProjectExplorationResponse.  # noqa: E501


        :return: The groups of this ProjectExplorationResponse.  # noqa: E501
        :rtype: list[TopicGroupResponse]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ProjectExplorationResponse.


        :param groups: The groups of this ProjectExplorationResponse.  # noqa: E501
        :type groups: list[TopicGroupResponse]
        """

        self._groups = groups

    @property
    def ignore_terms(self):
        """Gets the ignore_terms of this ProjectExplorationResponse.  # noqa: E501


        :return: The ignore_terms of this ProjectExplorationResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._ignore_terms

    @ignore_terms.setter
    def ignore_terms(self, ignore_terms):
        """Sets the ignore_terms of this ProjectExplorationResponse.


        :param ignore_terms: The ignore_terms of this ProjectExplorationResponse.  # noqa: E501
        :type ignore_terms: list[str]
        """

        self._ignore_terms = ignore_terms

    @property
    def language(self):
        """Gets the language of this ProjectExplorationResponse.  # noqa: E501


        :return: The language of this ProjectExplorationResponse.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ProjectExplorationResponse.


        :param language: The language of this ProjectExplorationResponse.  # noqa: E501
        :type language: str
        """

        self._language = language

    @property
    def column_header_id(self):
        """Gets the column_header_id of this ProjectExplorationResponse.  # noqa: E501


        :return: The column_header_id of this ProjectExplorationResponse.  # noqa: E501
        :rtype: int
        """
        return self._column_header_id

    @column_header_id.setter
    def column_header_id(self, column_header_id):
        """Sets the column_header_id of this ProjectExplorationResponse.


        :param column_header_id: The column_header_id of this ProjectExplorationResponse.  # noqa: E501
        :type column_header_id: int
        """

        self._column_header_id = column_header_id

    @property
    def filters(self):
        """Gets the filters of this ProjectExplorationResponse.  # noqa: E501


        :return: The filters of this ProjectExplorationResponse.  # noqa: E501
        :rtype: list[Filter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ProjectExplorationResponse.


        :param filters: The filters of this ProjectExplorationResponse.  # noqa: E501
        :type filters: list[Filter]
        """

        self._filters = filters

    @property
    def concept_filter(self):
        """Gets the concept_filter of this ProjectExplorationResponse.  # noqa: E501


        :return: The concept_filter of this ProjectExplorationResponse.  # noqa: E501
        :rtype: ConceptFilter
        """
        return self._concept_filter

    @concept_filter.setter
    def concept_filter(self, concept_filter):
        """Sets the concept_filter of this ProjectExplorationResponse.


        :param concept_filter: The concept_filter of this ProjectExplorationResponse.  # noqa: E501
        :type concept_filter: ConceptFilter
        """

        self._concept_filter = concept_filter

    @property
    def tones(self):
        """Gets the tones of this ProjectExplorationResponse.  # noqa: E501


        :return: The tones of this ProjectExplorationResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._tones

    @tones.setter
    def tones(self, tones):
        """Sets the tones of this ProjectExplorationResponse.


        :param tones: The tones of this ProjectExplorationResponse.  # noqa: E501
        :type tones: list[str]
        """

        self._tones = tones

    @property
    def total_document_count(self):
        """Gets the total_document_count of this ProjectExplorationResponse.  # noqa: E501


        :return: The total_document_count of this ProjectExplorationResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_document_count

    @total_document_count.setter
    def total_document_count(self, total_document_count):
        """Sets the total_document_count of this ProjectExplorationResponse.


        :param total_document_count: The total_document_count of this ProjectExplorationResponse.  # noqa: E501
        :type total_document_count: int
        """

        self._total_document_count = total_document_count

    @property
    def outdated(self):
        """Gets the outdated of this ProjectExplorationResponse.  # noqa: E501


        :return: The outdated of this ProjectExplorationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._outdated

    @outdated.setter
    def outdated(self, outdated):
        """Sets the outdated of this ProjectExplorationResponse.


        :param outdated: The outdated of this ProjectExplorationResponse.  # noqa: E501
        :type outdated: bool
        """

        self._outdated = outdated

    @property
    def tonality_customization_id(self):
        """Gets the tonality_customization_id of this ProjectExplorationResponse.  # noqa: E501


        :return: The tonality_customization_id of this ProjectExplorationResponse.  # noqa: E501
        :rtype: int
        """
        return self._tonality_customization_id

    @tonality_customization_id.setter
    def tonality_customization_id(self, tonality_customization_id):
        """Sets the tonality_customization_id of this ProjectExplorationResponse.


        :param tonality_customization_id: The tonality_customization_id of this ProjectExplorationResponse.  # noqa: E501
        :type tonality_customization_id: int
        """

        self._tonality_customization_id = tonality_customization_id

    @property
    def coverage_statistics(self):
        """Gets the coverage_statistics of this ProjectExplorationResponse.  # noqa: E501


        :return: The coverage_statistics of this ProjectExplorationResponse.  # noqa: E501
        :rtype: CoverageStatistics
        """
        return self._coverage_statistics

    @coverage_statistics.setter
    def coverage_statistics(self, coverage_statistics):
        """Sets the coverage_statistics of this ProjectExplorationResponse.


        :param coverage_statistics: The coverage_statistics of this ProjectExplorationResponse.  # noqa: E501
        :type coverage_statistics: CoverageStatistics
        """

        self._coverage_statistics = coverage_statistics

    @property
    def project_tonalities(self):
        """Gets the project_tonalities of this ProjectExplorationResponse.  # noqa: E501


        :return: The project_tonalities of this ProjectExplorationResponse.  # noqa: E501
        :rtype: ProjectDocumentTonalities
        """
        return self._project_tonalities

    @project_tonalities.setter
    def project_tonalities(self, project_tonalities):
        """Sets the project_tonalities of this ProjectExplorationResponse.


        :param project_tonalities: The project_tonalities of this ProjectExplorationResponse.  # noqa: E501
        :type project_tonalities: ProjectDocumentTonalities
        """

        self._project_tonalities = project_tonalities

    @property
    def filter_by_language(self):
        """Gets the filter_by_language of this ProjectExplorationResponse.  # noqa: E501


        :return: The filter_by_language of this ProjectExplorationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._filter_by_language

    @filter_by_language.setter
    def filter_by_language(self, filter_by_language):
        """Sets the filter_by_language of this ProjectExplorationResponse.


        :param filter_by_language: The filter_by_language of this ProjectExplorationResponse.  # noqa: E501
        :type filter_by_language: bool
        """

        self._filter_by_language = filter_by_language

    @property
    def query_filter(self):
        """Gets the query_filter of this ProjectExplorationResponse.  # noqa: E501


        :return: The query_filter of this ProjectExplorationResponse.  # noqa: E501
        :rtype: bool
        """
        return self._query_filter

    @query_filter.setter
    def query_filter(self, query_filter):
        """Sets the query_filter of this ProjectExplorationResponse.


        :param query_filter: The query_filter of this ProjectExplorationResponse.  # noqa: E501
        :type query_filter: bool
        """

        self._query_filter = query_filter

    @property
    def drivers(self):
        """Gets the drivers of this ProjectExplorationResponse.  # noqa: E501


        :return: The drivers of this ProjectExplorationResponse.  # noqa: E501
        :rtype: list[DriverResponse]
        """
        return self._drivers

    @drivers.setter
    def drivers(self, drivers):
        """Sets the drivers of this ProjectExplorationResponse.


        :param drivers: The drivers of this ProjectExplorationResponse.  # noqa: E501
        :type drivers: list[DriverResponse]
        """

        self._drivers = drivers

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectExplorationResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectExplorationResponse):
            return True

        return self.to_dict() != other.to_dict()
