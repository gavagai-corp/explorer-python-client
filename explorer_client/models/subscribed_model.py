# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p><p>Use <code>https://api.gavagai.se/explorer/v1/</code> as the Base URL for each of these API endpoints</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from explorer_client.configuration import Configuration


class SubscribedModel(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'title': 'str',
        'created': 'int',
        'created_by': 'User',
        'applied_model_version': 'ModelVersion',
        'language': 'str',
        'outdated': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'title': 'title',
        'created': 'created',
        'created_by': 'createdBy',
        'applied_model_version': 'appliedModelVersion',
        'language': 'language',
        'outdated': 'outdated'
    }

    def __init__(self, id=None, title=None, created=None, created_by=None, applied_model_version=None, language=None, outdated=None, local_vars_configuration=None):  # noqa: E501
        """SubscribedModel - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._title = None
        self._created = None
        self._created_by = None
        self._applied_model_version = None
        self._language = None
        self._outdated = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if title is not None:
            self.title = title
        if created is not None:
            self.created = created
        if created_by is not None:
            self.created_by = created_by
        if applied_model_version is not None:
            self.applied_model_version = applied_model_version
        if language is not None:
            self.language = language
        if outdated is not None:
            self.outdated = outdated

    @property
    def id(self):
        """Gets the id of this SubscribedModel.  # noqa: E501


        :return: The id of this SubscribedModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubscribedModel.


        :param id: The id of this SubscribedModel.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def title(self):
        """Gets the title of this SubscribedModel.  # noqa: E501


        :return: The title of this SubscribedModel.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SubscribedModel.


        :param title: The title of this SubscribedModel.  # noqa: E501
        :type title: str
        """

        self._title = title

    @property
    def created(self):
        """Gets the created of this SubscribedModel.  # noqa: E501


        :return: The created of this SubscribedModel.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this SubscribedModel.


        :param created: The created of this SubscribedModel.  # noqa: E501
        :type created: int
        """

        self._created = created

    @property
    def created_by(self):
        """Gets the created_by of this SubscribedModel.  # noqa: E501


        :return: The created_by of this SubscribedModel.  # noqa: E501
        :rtype: User
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this SubscribedModel.


        :param created_by: The created_by of this SubscribedModel.  # noqa: E501
        :type created_by: User
        """

        self._created_by = created_by

    @property
    def applied_model_version(self):
        """Gets the applied_model_version of this SubscribedModel.  # noqa: E501


        :return: The applied_model_version of this SubscribedModel.  # noqa: E501
        :rtype: ModelVersion
        """
        return self._applied_model_version

    @applied_model_version.setter
    def applied_model_version(self, applied_model_version):
        """Sets the applied_model_version of this SubscribedModel.


        :param applied_model_version: The applied_model_version of this SubscribedModel.  # noqa: E501
        :type applied_model_version: ModelVersion
        """

        self._applied_model_version = applied_model_version

    @property
    def language(self):
        """Gets the language of this SubscribedModel.  # noqa: E501


        :return: The language of this SubscribedModel.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SubscribedModel.


        :param language: The language of this SubscribedModel.  # noqa: E501
        :type language: str
        """

        self._language = language

    @property
    def outdated(self):
        """Gets the outdated of this SubscribedModel.  # noqa: E501


        :return: The outdated of this SubscribedModel.  # noqa: E501
        :rtype: bool
        """
        return self._outdated

    @outdated.setter
    def outdated(self, outdated):
        """Sets the outdated of this SubscribedModel.


        :param outdated: The outdated of this SubscribedModel.  # noqa: E501
        :type outdated: bool
        """

        self._outdated = outdated

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubscribedModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SubscribedModel):
            return True

        return self.to_dict() != other.to_dict()
