# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p><p>Use <code>https://api.gavagai.se/explorer/v1/</code> as the Base URL for each of these API endpoints</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from explorer_client.configuration import Configuration


class TonalitiesResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'terms': 'list[str]',
        'associations': 'list[str]',
        'tonalities': 'list[Tonality]',
        'documents': 'list[DocumentSentences]',
        'tonality_document_count': 'int',
        'document_count': 'int',
        'progress': 'int',
        'status': 'str',
        'sort_by_tonality': 'str',
        'order_by': 'str',
        'tonalities_calculation_mode': 'str'
    }

    attribute_map = {
        'terms': 'terms',
        'associations': 'associations',
        'tonalities': 'tonalities',
        'documents': 'documents',
        'tonality_document_count': 'tonalityDocumentCount',
        'document_count': 'documentCount',
        'progress': 'progress',
        'status': 'status',
        'sort_by_tonality': 'sortByTonality',
        'order_by': 'orderBy',
        'tonalities_calculation_mode': 'tonalitiesCalculationMode'
    }

    def __init__(self, terms=None, associations=None, tonalities=None, documents=None, tonality_document_count=None, document_count=None, progress=None, status=None, sort_by_tonality=None, order_by=None, tonalities_calculation_mode=None, local_vars_configuration=None):  # noqa: E501
        """TonalitiesResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._terms = None
        self._associations = None
        self._tonalities = None
        self._documents = None
        self._tonality_document_count = None
        self._document_count = None
        self._progress = None
        self._status = None
        self._sort_by_tonality = None
        self._order_by = None
        self._tonalities_calculation_mode = None
        self.discriminator = None

        if terms is not None:
            self.terms = terms
        if associations is not None:
            self.associations = associations
        if tonalities is not None:
            self.tonalities = tonalities
        if documents is not None:
            self.documents = documents
        if tonality_document_count is not None:
            self.tonality_document_count = tonality_document_count
        if document_count is not None:
            self.document_count = document_count
        if progress is not None:
            self.progress = progress
        if status is not None:
            self.status = status
        if sort_by_tonality is not None:
            self.sort_by_tonality = sort_by_tonality
        if order_by is not None:
            self.order_by = order_by
        if tonalities_calculation_mode is not None:
            self.tonalities_calculation_mode = tonalities_calculation_mode

    @property
    def terms(self):
        """Gets the terms of this TonalitiesResponse.  # noqa: E501


        :return: The terms of this TonalitiesResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._terms

    @terms.setter
    def terms(self, terms):
        """Sets the terms of this TonalitiesResponse.


        :param terms: The terms of this TonalitiesResponse.  # noqa: E501
        :type terms: list[str]
        """

        self._terms = terms

    @property
    def associations(self):
        """Gets the associations of this TonalitiesResponse.  # noqa: E501


        :return: The associations of this TonalitiesResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._associations

    @associations.setter
    def associations(self, associations):
        """Sets the associations of this TonalitiesResponse.


        :param associations: The associations of this TonalitiesResponse.  # noqa: E501
        :type associations: list[str]
        """

        self._associations = associations

    @property
    def tonalities(self):
        """Gets the tonalities of this TonalitiesResponse.  # noqa: E501


        :return: The tonalities of this TonalitiesResponse.  # noqa: E501
        :rtype: list[Tonality]
        """
        return self._tonalities

    @tonalities.setter
    def tonalities(self, tonalities):
        """Sets the tonalities of this TonalitiesResponse.


        :param tonalities: The tonalities of this TonalitiesResponse.  # noqa: E501
        :type tonalities: list[Tonality]
        """

        self._tonalities = tonalities

    @property
    def documents(self):
        """Gets the documents of this TonalitiesResponse.  # noqa: E501


        :return: The documents of this TonalitiesResponse.  # noqa: E501
        :rtype: list[DocumentSentences]
        """
        return self._documents

    @documents.setter
    def documents(self, documents):
        """Sets the documents of this TonalitiesResponse.


        :param documents: The documents of this TonalitiesResponse.  # noqa: E501
        :type documents: list[DocumentSentences]
        """

        self._documents = documents

    @property
    def tonality_document_count(self):
        """Gets the tonality_document_count of this TonalitiesResponse.  # noqa: E501


        :return: The tonality_document_count of this TonalitiesResponse.  # noqa: E501
        :rtype: int
        """
        return self._tonality_document_count

    @tonality_document_count.setter
    def tonality_document_count(self, tonality_document_count):
        """Sets the tonality_document_count of this TonalitiesResponse.


        :param tonality_document_count: The tonality_document_count of this TonalitiesResponse.  # noqa: E501
        :type tonality_document_count: int
        """

        self._tonality_document_count = tonality_document_count

    @property
    def document_count(self):
        """Gets the document_count of this TonalitiesResponse.  # noqa: E501


        :return: The document_count of this TonalitiesResponse.  # noqa: E501
        :rtype: int
        """
        return self._document_count

    @document_count.setter
    def document_count(self, document_count):
        """Sets the document_count of this TonalitiesResponse.


        :param document_count: The document_count of this TonalitiesResponse.  # noqa: E501
        :type document_count: int
        """

        self._document_count = document_count

    @property
    def progress(self):
        """Gets the progress of this TonalitiesResponse.  # noqa: E501


        :return: The progress of this TonalitiesResponse.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this TonalitiesResponse.


        :param progress: The progress of this TonalitiesResponse.  # noqa: E501
        :type progress: int
        """

        self._progress = progress

    @property
    def status(self):
        """Gets the status of this TonalitiesResponse.  # noqa: E501


        :return: The status of this TonalitiesResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this TonalitiesResponse.


        :param status: The status of this TonalitiesResponse.  # noqa: E501
        :type status: str
        """
        allowed_values = ["NOT_STARTED", "IN_PROGRESS", "FINISHED", "ERROR"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sort_by_tonality(self):
        """Gets the sort_by_tonality of this TonalitiesResponse.  # noqa: E501


        :return: The sort_by_tonality of this TonalitiesResponse.  # noqa: E501
        :rtype: str
        """
        return self._sort_by_tonality

    @sort_by_tonality.setter
    def sort_by_tonality(self, sort_by_tonality):
        """Sets the sort_by_tonality of this TonalitiesResponse.


        :param sort_by_tonality: The sort_by_tonality of this TonalitiesResponse.  # noqa: E501
        :type sort_by_tonality: str
        """

        self._sort_by_tonality = sort_by_tonality

    @property
    def order_by(self):
        """Gets the order_by of this TonalitiesResponse.  # noqa: E501


        :return: The order_by of this TonalitiesResponse.  # noqa: E501
        :rtype: str
        """
        return self._order_by

    @order_by.setter
    def order_by(self, order_by):
        """Sets the order_by of this TonalitiesResponse.


        :param order_by: The order_by of this TonalitiesResponse.  # noqa: E501
        :type order_by: str
        """
        allowed_values = ["SENTIMENT_DESC", "INSERTION_ORDER_DESC", "INSERTION_ORDER_ASC", "DIFFERENCE_FROM_OPPOSITE_SENTIMENT_DESC"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and order_by not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `order_by` ({0}), must be one of {1}"  # noqa: E501
                .format(order_by, allowed_values)
            )

        self._order_by = order_by

    @property
    def tonalities_calculation_mode(self):
        """Gets the tonalities_calculation_mode of this TonalitiesResponse.  # noqa: E501


        :return: The tonalities_calculation_mode of this TonalitiesResponse.  # noqa: E501
        :rtype: str
        """
        return self._tonalities_calculation_mode

    @tonalities_calculation_mode.setter
    def tonalities_calculation_mode(self, tonalities_calculation_mode):
        """Sets the tonalities_calculation_mode of this TonalitiesResponse.


        :param tonalities_calculation_mode: The tonalities_calculation_mode of this TonalitiesResponse.  # noqa: E501
        :type tonalities_calculation_mode: str
        """
        allowed_values = ["AGGREGATED_SUM", "BINARY_DISTRIBUTED", "BINARY"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and tonalities_calculation_mode not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `tonalities_calculation_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(tonalities_calculation_mode, allowed_values)
            )

        self._tonalities_calculation_mode = tonalities_calculation_mode

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TonalitiesResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TonalitiesResponse):
            return True

        return self.to_dict() != other.to_dict()
