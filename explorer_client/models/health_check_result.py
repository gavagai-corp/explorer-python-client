# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from explorer_client.configuration import Configuration


class HealthCheckResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'health_check_type': 'str',
        'response_time_millis': 'int',
        'healthy': 'bool'
    }

    attribute_map = {
        'health_check_type': 'healthCheckType',
        'response_time_millis': 'responseTimeMillis',
        'healthy': 'healthy'
    }

    def __init__(self, health_check_type=None, response_time_millis=None, healthy=None, local_vars_configuration=None):  # noqa: E501
        """HealthCheckResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._health_check_type = None
        self._response_time_millis = None
        self._healthy = None
        self.discriminator = None

        if health_check_type is not None:
            self.health_check_type = health_check_type
        if response_time_millis is not None:
            self.response_time_millis = response_time_millis
        if healthy is not None:
            self.healthy = healthy

    @property
    def health_check_type(self):
        """Gets the health_check_type of this HealthCheckResult.  # noqa: E501


        :return: The health_check_type of this HealthCheckResult.  # noqa: E501
        :rtype: str
        """
        return self._health_check_type

    @health_check_type.setter
    def health_check_type(self, health_check_type):
        """Sets the health_check_type of this HealthCheckResult.


        :param health_check_type: The health_check_type of this HealthCheckResult.  # noqa: E501
        :type health_check_type: str
        """
        allowed_values = ["CORE_CHECK", "DB_CHECK_TIMESTAMP"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and health_check_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `health_check_type` ({0}), must be one of {1}"  # noqa: E501
                .format(health_check_type, allowed_values)
            )

        self._health_check_type = health_check_type

    @property
    def response_time_millis(self):
        """Gets the response_time_millis of this HealthCheckResult.  # noqa: E501


        :return: The response_time_millis of this HealthCheckResult.  # noqa: E501
        :rtype: int
        """
        return self._response_time_millis

    @response_time_millis.setter
    def response_time_millis(self, response_time_millis):
        """Sets the response_time_millis of this HealthCheckResult.


        :param response_time_millis: The response_time_millis of this HealthCheckResult.  # noqa: E501
        :type response_time_millis: int
        """

        self._response_time_millis = response_time_millis

    @property
    def healthy(self):
        """Gets the healthy of this HealthCheckResult.  # noqa: E501


        :return: The healthy of this HealthCheckResult.  # noqa: E501
        :rtype: bool
        """
        return self._healthy

    @healthy.setter
    def healthy(self, healthy):
        """Sets the healthy of this HealthCheckResult.


        :param healthy: The healthy of this HealthCheckResult.  # noqa: E501
        :type healthy: bool
        """

        self._healthy = healthy

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HealthCheckResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HealthCheckResult):
            return True

        return self.to_dict() != other.to_dict()
