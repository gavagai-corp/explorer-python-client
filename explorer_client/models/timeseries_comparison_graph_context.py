# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from explorer_client.configuration import Configuration


class TimeseriesComparisonGraphContext(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'selected_metric': 'Metric',
        'date_column_header_id': 'int',
        'resolution': 'str',
        'start_date': 'int',
        'end_date': 'int',
        'curves': 'list[TimeseriesComparisonCurve]'
    }

    attribute_map = {
        'selected_metric': 'selectedMetric',
        'date_column_header_id': 'dateColumnHeaderId',
        'resolution': 'resolution',
        'start_date': 'startDate',
        'end_date': 'endDate',
        'curves': 'curves'
    }

    def __init__(self, selected_metric=None, date_column_header_id=None, resolution=None, start_date=None, end_date=None, curves=None, local_vars_configuration=None):  # noqa: E501
        """TimeseriesComparisonGraphContext - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._selected_metric = None
        self._date_column_header_id = None
        self._resolution = None
        self._start_date = None
        self._end_date = None
        self._curves = None
        self.discriminator = None

        if selected_metric is not None:
            self.selected_metric = selected_metric
        if date_column_header_id is not None:
            self.date_column_header_id = date_column_header_id
        if resolution is not None:
            self.resolution = resolution
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if curves is not None:
            self.curves = curves

    @property
    def selected_metric(self):
        """Gets the selected_metric of this TimeseriesComparisonGraphContext.  # noqa: E501


        :return: The selected_metric of this TimeseriesComparisonGraphContext.  # noqa: E501
        :rtype: Metric
        """
        return self._selected_metric

    @selected_metric.setter
    def selected_metric(self, selected_metric):
        """Sets the selected_metric of this TimeseriesComparisonGraphContext.


        :param selected_metric: The selected_metric of this TimeseriesComparisonGraphContext.  # noqa: E501
        :type selected_metric: Metric
        """

        self._selected_metric = selected_metric

    @property
    def date_column_header_id(self):
        """Gets the date_column_header_id of this TimeseriesComparisonGraphContext.  # noqa: E501


        :return: The date_column_header_id of this TimeseriesComparisonGraphContext.  # noqa: E501
        :rtype: int
        """
        return self._date_column_header_id

    @date_column_header_id.setter
    def date_column_header_id(self, date_column_header_id):
        """Sets the date_column_header_id of this TimeseriesComparisonGraphContext.


        :param date_column_header_id: The date_column_header_id of this TimeseriesComparisonGraphContext.  # noqa: E501
        :type date_column_header_id: int
        """

        self._date_column_header_id = date_column_header_id

    @property
    def resolution(self):
        """Gets the resolution of this TimeseriesComparisonGraphContext.  # noqa: E501


        :return: The resolution of this TimeseriesComparisonGraphContext.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this TimeseriesComparisonGraphContext.


        :param resolution: The resolution of this TimeseriesComparisonGraphContext.  # noqa: E501
        :type resolution: str
        """
        allowed_values = ["MINUTE", "HOUR", "DAY", "MONTH", "YEAR"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and resolution not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `resolution` ({0}), must be one of {1}"  # noqa: E501
                .format(resolution, allowed_values)
            )

        self._resolution = resolution

    @property
    def start_date(self):
        """Gets the start_date of this TimeseriesComparisonGraphContext.  # noqa: E501


        :return: The start_date of this TimeseriesComparisonGraphContext.  # noqa: E501
        :rtype: int
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this TimeseriesComparisonGraphContext.


        :param start_date: The start_date of this TimeseriesComparisonGraphContext.  # noqa: E501
        :type start_date: int
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this TimeseriesComparisonGraphContext.  # noqa: E501


        :return: The end_date of this TimeseriesComparisonGraphContext.  # noqa: E501
        :rtype: int
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this TimeseriesComparisonGraphContext.


        :param end_date: The end_date of this TimeseriesComparisonGraphContext.  # noqa: E501
        :type end_date: int
        """

        self._end_date = end_date

    @property
    def curves(self):
        """Gets the curves of this TimeseriesComparisonGraphContext.  # noqa: E501


        :return: The curves of this TimeseriesComparisonGraphContext.  # noqa: E501
        :rtype: list[TimeseriesComparisonCurve]
        """
        return self._curves

    @curves.setter
    def curves(self, curves):
        """Sets the curves of this TimeseriesComparisonGraphContext.


        :param curves: The curves of this TimeseriesComparisonGraphContext.  # noqa: E501
        :type curves: list[TimeseriesComparisonCurve]
        """

        self._curves = curves

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeseriesComparisonGraphContext):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, TimeseriesComparisonGraphContext):
            return True

        return self.to_dict() != other.to_dict()
