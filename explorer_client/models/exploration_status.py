# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from explorer_client.configuration import Configuration


class ExplorationStatus(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'start_time': 'int',
        'progress': 'int',
        'message': 'str',
        'state': 'str',
        'accept_overage_token': 'str',
        'overage_amount': 'int',
        'product_price_in_cents': 'int',
        'currency': 'str',
        'exploration_time_millis': 'int'
    }

    attribute_map = {
        'start_time': 'startTime',
        'progress': 'progress',
        'message': 'message',
        'state': 'state',
        'accept_overage_token': 'acceptOverageToken',
        'overage_amount': 'overageAmount',
        'product_price_in_cents': 'productPriceInCents',
        'currency': 'currency',
        'exploration_time_millis': 'explorationTimeMillis'
    }

    def __init__(self, start_time=None, progress=None, message=None, state=None, accept_overage_token=None, overage_amount=None, product_price_in_cents=None, currency=None, exploration_time_millis=None, local_vars_configuration=None):  # noqa: E501
        """ExplorationStatus - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._start_time = None
        self._progress = None
        self._message = None
        self._state = None
        self._accept_overage_token = None
        self._overage_amount = None
        self._product_price_in_cents = None
        self._currency = None
        self._exploration_time_millis = None
        self.discriminator = None

        if start_time is not None:
            self.start_time = start_time
        if progress is not None:
            self.progress = progress
        if message is not None:
            self.message = message
        if state is not None:
            self.state = state
        if accept_overage_token is not None:
            self.accept_overage_token = accept_overage_token
        if overage_amount is not None:
            self.overage_amount = overage_amount
        if product_price_in_cents is not None:
            self.product_price_in_cents = product_price_in_cents
        if currency is not None:
            self.currency = currency
        if exploration_time_millis is not None:
            self.exploration_time_millis = exploration_time_millis

    @property
    def start_time(self):
        """Gets the start_time of this ExplorationStatus.  # noqa: E501


        :return: The start_time of this ExplorationStatus.  # noqa: E501
        :rtype: int
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ExplorationStatus.


        :param start_time: The start_time of this ExplorationStatus.  # noqa: E501
        :type start_time: int
        """

        self._start_time = start_time

    @property
    def progress(self):
        """Gets the progress of this ExplorationStatus.  # noqa: E501


        :return: The progress of this ExplorationStatus.  # noqa: E501
        :rtype: int
        """
        return self._progress

    @progress.setter
    def progress(self, progress):
        """Sets the progress of this ExplorationStatus.


        :param progress: The progress of this ExplorationStatus.  # noqa: E501
        :type progress: int
        """

        self._progress = progress

    @property
    def message(self):
        """Gets the message of this ExplorationStatus.  # noqa: E501


        :return: The message of this ExplorationStatus.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ExplorationStatus.


        :param message: The message of this ExplorationStatus.  # noqa: E501
        :type message: str
        """

        self._message = message

    @property
    def state(self):
        """Gets the state of this ExplorationStatus.  # noqa: E501


        :return: The state of this ExplorationStatus.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ExplorationStatus.


        :param state: The state of this ExplorationStatus.  # noqa: E501
        :type state: str
        """
        allowed_values = ["NOT_STARTED", "STARTED", "FINISHED", "ERROR", "TIMEOUT", "NO_CREDITS"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and state not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"  # noqa: E501
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def accept_overage_token(self):
        """Gets the accept_overage_token of this ExplorationStatus.  # noqa: E501


        :return: The accept_overage_token of this ExplorationStatus.  # noqa: E501
        :rtype: str
        """
        return self._accept_overage_token

    @accept_overage_token.setter
    def accept_overage_token(self, accept_overage_token):
        """Sets the accept_overage_token of this ExplorationStatus.


        :param accept_overage_token: The accept_overage_token of this ExplorationStatus.  # noqa: E501
        :type accept_overage_token: str
        """

        self._accept_overage_token = accept_overage_token

    @property
    def overage_amount(self):
        """Gets the overage_amount of this ExplorationStatus.  # noqa: E501


        :return: The overage_amount of this ExplorationStatus.  # noqa: E501
        :rtype: int
        """
        return self._overage_amount

    @overage_amount.setter
    def overage_amount(self, overage_amount):
        """Sets the overage_amount of this ExplorationStatus.


        :param overage_amount: The overage_amount of this ExplorationStatus.  # noqa: E501
        :type overage_amount: int
        """

        self._overage_amount = overage_amount

    @property
    def product_price_in_cents(self):
        """Gets the product_price_in_cents of this ExplorationStatus.  # noqa: E501


        :return: The product_price_in_cents of this ExplorationStatus.  # noqa: E501
        :rtype: int
        """
        return self._product_price_in_cents

    @product_price_in_cents.setter
    def product_price_in_cents(self, product_price_in_cents):
        """Sets the product_price_in_cents of this ExplorationStatus.


        :param product_price_in_cents: The product_price_in_cents of this ExplorationStatus.  # noqa: E501
        :type product_price_in_cents: int
        """

        self._product_price_in_cents = product_price_in_cents

    @property
    def currency(self):
        """Gets the currency of this ExplorationStatus.  # noqa: E501


        :return: The currency of this ExplorationStatus.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ExplorationStatus.


        :param currency: The currency of this ExplorationStatus.  # noqa: E501
        :type currency: str
        """

        self._currency = currency

    @property
    def exploration_time_millis(self):
        """Gets the exploration_time_millis of this ExplorationStatus.  # noqa: E501


        :return: The exploration_time_millis of this ExplorationStatus.  # noqa: E501
        :rtype: int
        """
        return self._exploration_time_millis

    @exploration_time_millis.setter
    def exploration_time_millis(self, exploration_time_millis):
        """Sets the exploration_time_millis of this ExplorationStatus.


        :param exploration_time_millis: The exploration_time_millis of this ExplorationStatus.  # noqa: E501
        :type exploration_time_millis: int
        """

        self._exploration_time_millis = exploration_time_millis

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExplorationStatus):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ExplorationStatus):
            return True

        return self.to_dict() != other.to_dict()
