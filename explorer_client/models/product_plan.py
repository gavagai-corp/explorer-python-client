# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from explorer_client.configuration import Configuration


class ProductPlan(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'handle': 'str',
        'description': 'str',
        'monthly_cost_in_cents': 'int',
        'currency': 'str',
        'projects_allowed': 'int',
        'included_credits': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'handle': 'handle',
        'description': 'description',
        'monthly_cost_in_cents': 'monthlyCostInCents',
        'currency': 'currency',
        'projects_allowed': 'projectsAllowed',
        'included_credits': 'includedCredits'
    }

    def __init__(self, id=None, name=None, handle=None, description=None, monthly_cost_in_cents=None, currency=None, projects_allowed=None, included_credits=None, local_vars_configuration=None):  # noqa: E501
        """ProductPlan - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._handle = None
        self._description = None
        self._monthly_cost_in_cents = None
        self._currency = None
        self._projects_allowed = None
        self._included_credits = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if handle is not None:
            self.handle = handle
        if description is not None:
            self.description = description
        if monthly_cost_in_cents is not None:
            self.monthly_cost_in_cents = monthly_cost_in_cents
        if currency is not None:
            self.currency = currency
        if projects_allowed is not None:
            self.projects_allowed = projects_allowed
        if included_credits is not None:
            self.included_credits = included_credits

    @property
    def id(self):
        """Gets the id of this ProductPlan.  # noqa: E501


        :return: The id of this ProductPlan.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProductPlan.


        :param id: The id of this ProductPlan.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProductPlan.  # noqa: E501


        :return: The name of this ProductPlan.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProductPlan.


        :param name: The name of this ProductPlan.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def handle(self):
        """Gets the handle of this ProductPlan.  # noqa: E501


        :return: The handle of this ProductPlan.  # noqa: E501
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """Sets the handle of this ProductPlan.


        :param handle: The handle of this ProductPlan.  # noqa: E501
        :type handle: str
        """

        self._handle = handle

    @property
    def description(self):
        """Gets the description of this ProductPlan.  # noqa: E501


        :return: The description of this ProductPlan.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ProductPlan.


        :param description: The description of this ProductPlan.  # noqa: E501
        :type description: str
        """

        self._description = description

    @property
    def monthly_cost_in_cents(self):
        """Gets the monthly_cost_in_cents of this ProductPlan.  # noqa: E501


        :return: The monthly_cost_in_cents of this ProductPlan.  # noqa: E501
        :rtype: int
        """
        return self._monthly_cost_in_cents

    @monthly_cost_in_cents.setter
    def monthly_cost_in_cents(self, monthly_cost_in_cents):
        """Sets the monthly_cost_in_cents of this ProductPlan.


        :param monthly_cost_in_cents: The monthly_cost_in_cents of this ProductPlan.  # noqa: E501
        :type monthly_cost_in_cents: int
        """

        self._monthly_cost_in_cents = monthly_cost_in_cents

    @property
    def currency(self):
        """Gets the currency of this ProductPlan.  # noqa: E501


        :return: The currency of this ProductPlan.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this ProductPlan.


        :param currency: The currency of this ProductPlan.  # noqa: E501
        :type currency: str
        """

        self._currency = currency

    @property
    def projects_allowed(self):
        """Gets the projects_allowed of this ProductPlan.  # noqa: E501


        :return: The projects_allowed of this ProductPlan.  # noqa: E501
        :rtype: int
        """
        return self._projects_allowed

    @projects_allowed.setter
    def projects_allowed(self, projects_allowed):
        """Sets the projects_allowed of this ProductPlan.


        :param projects_allowed: The projects_allowed of this ProductPlan.  # noqa: E501
        :type projects_allowed: int
        """

        self._projects_allowed = projects_allowed

    @property
    def included_credits(self):
        """Gets the included_credits of this ProductPlan.  # noqa: E501


        :return: The included_credits of this ProductPlan.  # noqa: E501
        :rtype: int
        """
        return self._included_credits

    @included_credits.setter
    def included_credits(self, included_credits):
        """Sets the included_credits of this ProductPlan.


        :param included_credits: The included_credits of this ProductPlan.  # noqa: E501
        :type included_credits: int
        """

        self._included_credits = included_credits

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProductPlan):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProductPlan):
            return True

        return self.to_dict() != other.to_dict()
