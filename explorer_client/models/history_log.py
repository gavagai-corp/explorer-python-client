# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p><p>Use <code>https://api.gavagai.se/explorer/v1/</code> as the Base URL for each of these API endpoints</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from explorer_client.configuration import Configuration


class HistoryLog(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'created': 'int',
        'message': 'str',
        'file_name': 'str',
        'rows': 'int'
    }

    attribute_map = {
        'id': 'id',
        'created': 'created',
        'message': 'message',
        'file_name': 'fileName',
        'rows': 'rows'
    }

    def __init__(self, id=None, created=None, message=None, file_name=None, rows=None, local_vars_configuration=None):  # noqa: E501
        """HistoryLog - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._created = None
        self._message = None
        self._file_name = None
        self._rows = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if created is not None:
            self.created = created
        if message is not None:
            self.message = message
        if file_name is not None:
            self.file_name = file_name
        if rows is not None:
            self.rows = rows

    @property
    def id(self):
        """Gets the id of this HistoryLog.  # noqa: E501


        :return: The id of this HistoryLog.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this HistoryLog.


        :param id: The id of this HistoryLog.  # noqa: E501
        :type id: int
        """

        self._id = id

    @property
    def created(self):
        """Gets the created of this HistoryLog.  # noqa: E501


        :return: The created of this HistoryLog.  # noqa: E501
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this HistoryLog.


        :param created: The created of this HistoryLog.  # noqa: E501
        :type created: int
        """

        self._created = created

    @property
    def message(self):
        """Gets the message of this HistoryLog.  # noqa: E501


        :return: The message of this HistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this HistoryLog.


        :param message: The message of this HistoryLog.  # noqa: E501
        :type message: str
        """

        self._message = message

    @property
    def file_name(self):
        """Gets the file_name of this HistoryLog.  # noqa: E501


        :return: The file_name of this HistoryLog.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this HistoryLog.


        :param file_name: The file_name of this HistoryLog.  # noqa: E501
        :type file_name: str
        """

        self._file_name = file_name

    @property
    def rows(self):
        """Gets the rows of this HistoryLog.  # noqa: E501


        :return: The rows of this HistoryLog.  # noqa: E501
        :rtype: int
        """
        return self._rows

    @rows.setter
    def rows(self, rows):
        """Sets the rows of this HistoryLog.


        :param rows: The rows of this HistoryLog.  # noqa: E501
        :type rows: int
        """

        self._rows = rows

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HistoryLog):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, HistoryLog):
            return True

        return self.to_dict() != other.to_dict()
