# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p><p>Use <code>https://api.gavagai.se/explorer/v1/</code> as the Base URL for each of these API endpoints</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from explorer_client.configuration import Configuration


class ProjectExplorationContext(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'language': 'str',
        'ignore_terms': 'list[str]',
        'column_header_id': 'int',
        'filters': 'list[Filter]',
        'concept_filter': 'ConceptFilter',
        'groups': 'list[TopicGroupRequest]',
        'tonality_customization_id': 'int',
        'drivers': 'list[DriverRequest]',
        'filter_by_language': 'bool',
        'query_filter': 'bool'
    }

    attribute_map = {
        'language': 'language',
        'ignore_terms': 'ignoreTerms',
        'column_header_id': 'columnHeaderId',
        'filters': 'filters',
        'concept_filter': 'conceptFilter',
        'groups': 'groups',
        'tonality_customization_id': 'tonalityCustomizationId',
        'drivers': 'drivers',
        'filter_by_language': 'filterByLanguage',
        'query_filter': 'queryFilter'
    }

    def __init__(self, language=None, ignore_terms=None, column_header_id=None, filters=None, concept_filter=None, groups=None, tonality_customization_id=None, drivers=None, filter_by_language=None, query_filter=None, local_vars_configuration=None):  # noqa: E501
        """ProjectExplorationContext - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._language = None
        self._ignore_terms = None
        self._column_header_id = None
        self._filters = None
        self._concept_filter = None
        self._groups = None
        self._tonality_customization_id = None
        self._drivers = None
        self._filter_by_language = None
        self._query_filter = None
        self.discriminator = None

        self.language = language
        if ignore_terms is not None:
            self.ignore_terms = ignore_terms
        self.column_header_id = column_header_id
        if filters is not None:
            self.filters = filters
        if concept_filter is not None:
            self.concept_filter = concept_filter
        if groups is not None:
            self.groups = groups
        if tonality_customization_id is not None:
            self.tonality_customization_id = tonality_customization_id
        if drivers is not None:
            self.drivers = drivers
        if filter_by_language is not None:
            self.filter_by_language = filter_by_language
        if query_filter is not None:
            self.query_filter = query_filter

    @property
    def language(self):
        """Gets the language of this ProjectExplorationContext.  # noqa: E501

        The language in the chosen column. Should be an iso code from the list of supported languages that can be found at developer.gavagai.se  # noqa: E501

        :return: The language of this ProjectExplorationContext.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ProjectExplorationContext.

        The language in the chosen column. Should be an iso code from the list of supported languages that can be found at developer.gavagai.se  # noqa: E501

        :param language: The language of this ProjectExplorationContext.  # noqa: E501
        :type language: str
        """
        if self.local_vars_configuration.client_side_validation and language is None:  # noqa: E501
            raise ValueError("Invalid value for `language`, must not be `None`")  # noqa: E501

        self._language = language

    @property
    def ignore_terms(self):
        """Gets the ignore_terms of this ProjectExplorationContext.  # noqa: E501

        The terms to be ignored. These will not be considered as candidates for topics, although they   * can still become associations.  # noqa: E501

        :return: The ignore_terms of this ProjectExplorationContext.  # noqa: E501
        :rtype: list[str]
        """
        return self._ignore_terms

    @ignore_terms.setter
    def ignore_terms(self, ignore_terms):
        """Sets the ignore_terms of this ProjectExplorationContext.

        The terms to be ignored. These will not be considered as candidates for topics, although they   * can still become associations.  # noqa: E501

        :param ignore_terms: The ignore_terms of this ProjectExplorationContext.  # noqa: E501
        :type ignore_terms: list[str]
        """

        self._ignore_terms = ignore_terms

    @property
    def column_header_id(self):
        """Gets the column_header_id of this ProjectExplorationContext.  # noqa: E501

        The id of the columnHeader that you wish to analyze. This should be one of the columns of the project  # noqa: E501

        :return: The column_header_id of this ProjectExplorationContext.  # noqa: E501
        :rtype: int
        """
        return self._column_header_id

    @column_header_id.setter
    def column_header_id(self, column_header_id):
        """Sets the column_header_id of this ProjectExplorationContext.

        The id of the columnHeader that you wish to analyze. This should be one of the columns of the project  # noqa: E501

        :param column_header_id: The column_header_id of this ProjectExplorationContext.  # noqa: E501
        :type column_header_id: int
        """
        if self.local_vars_configuration.client_side_validation and column_header_id is None:  # noqa: E501
            raise ValueError("Invalid value for `column_header_id`, must not be `None`")  # noqa: E501

        self._column_header_id = column_header_id

    @property
    def filters(self):
        """Gets the filters of this ProjectExplorationContext.  # noqa: E501

        You may filter using columns other than the one which is being analyzed. Supply filters here as specified in the Filter type  # noqa: E501

        :return: The filters of this ProjectExplorationContext.  # noqa: E501
        :rtype: list[Filter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this ProjectExplorationContext.

        You may filter using columns other than the one which is being analyzed. Supply filters here as specified in the Filter type  # noqa: E501

        :param filters: The filters of this ProjectExplorationContext.  # noqa: E501
        :type filters: list[Filter]
        """

        self._filters = filters

    @property
    def concept_filter(self):
        """Gets the concept_filter of this ProjectExplorationContext.  # noqa: E501


        :return: The concept_filter of this ProjectExplorationContext.  # noqa: E501
        :rtype: ConceptFilter
        """
        return self._concept_filter

    @concept_filter.setter
    def concept_filter(self, concept_filter):
        """Sets the concept_filter of this ProjectExplorationContext.


        :param concept_filter: The concept_filter of this ProjectExplorationContext.  # noqa: E501
        :type concept_filter: ConceptFilter
        """

        self._concept_filter = concept_filter

    @property
    def groups(self):
        """Gets the groups of this ProjectExplorationContext.  # noqa: E501

        Specify your groups here. It is necessary to specify a group in this list if it has been modified in any way, such as if it is pinned or its title has been changed. You may send in other groups as well without adverse effects.  # noqa: E501

        :return: The groups of this ProjectExplorationContext.  # noqa: E501
        :rtype: list[TopicGroupRequest]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this ProjectExplorationContext.

        Specify your groups here. It is necessary to specify a group in this list if it has been modified in any way, such as if it is pinned or its title has been changed. You may send in other groups as well without adverse effects.  # noqa: E501

        :param groups: The groups of this ProjectExplorationContext.  # noqa: E501
        :type groups: list[TopicGroupRequest]
        """

        self._groups = groups

    @property
    def tonality_customization_id(self):
        """Gets the tonality_customization_id of this ProjectExplorationContext.  # noqa: E501

        Specify which tonality customization while performing tonality calculation use in the context of the exploration  # noqa: E501

        :return: The tonality_customization_id of this ProjectExplorationContext.  # noqa: E501
        :rtype: int
        """
        return self._tonality_customization_id

    @tonality_customization_id.setter
    def tonality_customization_id(self, tonality_customization_id):
        """Sets the tonality_customization_id of this ProjectExplorationContext.

        Specify which tonality customization while performing tonality calculation use in the context of the exploration  # noqa: E501

        :param tonality_customization_id: The tonality_customization_id of this ProjectExplorationContext.  # noqa: E501
        :type tonality_customization_id: int
        """

        self._tonality_customization_id = tonality_customization_id

    @property
    def drivers(self):
        """Gets the drivers of this ProjectExplorationContext.  # noqa: E501


        :return: The drivers of this ProjectExplorationContext.  # noqa: E501
        :rtype: list[DriverRequest]
        """
        return self._drivers

    @drivers.setter
    def drivers(self, drivers):
        """Sets the drivers of this ProjectExplorationContext.


        :param drivers: The drivers of this ProjectExplorationContext.  # noqa: E501
        :type drivers: list[DriverRequest]
        """

        self._drivers = drivers

    @property
    def filter_by_language(self):
        """Gets the filter_by_language of this ProjectExplorationContext.  # noqa: E501

        An indicator of whether the data considered for exploration should filtered by the selected language. Defaults to false.  # noqa: E501

        :return: The filter_by_language of this ProjectExplorationContext.  # noqa: E501
        :rtype: bool
        """
        return self._filter_by_language

    @filter_by_language.setter
    def filter_by_language(self, filter_by_language):
        """Sets the filter_by_language of this ProjectExplorationContext.

        An indicator of whether the data considered for exploration should filtered by the selected language. Defaults to false.  # noqa: E501

        :param filter_by_language: The filter_by_language of this ProjectExplorationContext.  # noqa: E501
        :type filter_by_language: bool
        """

        self._filter_by_language = filter_by_language

    @property
    def query_filter(self):
        """Gets the query_filter of this ProjectExplorationContext.  # noqa: E501

        If set to true, the project will be filtered to only contain queries i.e sentences that ends with a ?  # noqa: E501

        :return: The query_filter of this ProjectExplorationContext.  # noqa: E501
        :rtype: bool
        """
        return self._query_filter

    @query_filter.setter
    def query_filter(self, query_filter):
        """Sets the query_filter of this ProjectExplorationContext.

        If set to true, the project will be filtered to only contain queries i.e sentences that ends with a ?  # noqa: E501

        :param query_filter: The query_filter of this ProjectExplorationContext.  # noqa: E501
        :type query_filter: bool
        """

        self._query_filter = query_filter

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProjectExplorationContext):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProjectExplorationContext):
            return True

        return self.to_dict() != other.to_dict()
