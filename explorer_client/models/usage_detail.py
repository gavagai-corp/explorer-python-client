# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p><p>Use <code>https://api.gavagai.se/explorer/v1/</code> as the Base URL for each of these API endpoints</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


import inspect
import pprint
import re  # noqa: F401
import six

from explorer_client.configuration import Configuration


class UsageDetail(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'user_id': 'str',
        'projects_created': 'int',
        'project_slots_used': 'int',
        'credits_used': 'int'
    }

    attribute_map = {
        'user_id': 'userId',
        'projects_created': 'projectsCreated',
        'project_slots_used': 'projectSlotsUsed',
        'credits_used': 'creditsUsed'
    }

    def __init__(self, user_id=None, projects_created=None, project_slots_used=None, credits_used=None, local_vars_configuration=None):  # noqa: E501
        """UsageDetail - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._user_id = None
        self._projects_created = None
        self._project_slots_used = None
        self._credits_used = None
        self.discriminator = None

        if user_id is not None:
            self.user_id = user_id
        if projects_created is not None:
            self.projects_created = projects_created
        if project_slots_used is not None:
            self.project_slots_used = project_slots_used
        if credits_used is not None:
            self.credits_used = credits_used

    @property
    def user_id(self):
        """Gets the user_id of this UsageDetail.  # noqa: E501


        :return: The user_id of this UsageDetail.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this UsageDetail.


        :param user_id: The user_id of this UsageDetail.  # noqa: E501
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def projects_created(self):
        """Gets the projects_created of this UsageDetail.  # noqa: E501


        :return: The projects_created of this UsageDetail.  # noqa: E501
        :rtype: int
        """
        return self._projects_created

    @projects_created.setter
    def projects_created(self, projects_created):
        """Sets the projects_created of this UsageDetail.


        :param projects_created: The projects_created of this UsageDetail.  # noqa: E501
        :type projects_created: int
        """

        self._projects_created = projects_created

    @property
    def project_slots_used(self):
        """Gets the project_slots_used of this UsageDetail.  # noqa: E501


        :return: The project_slots_used of this UsageDetail.  # noqa: E501
        :rtype: int
        """
        return self._project_slots_used

    @project_slots_used.setter
    def project_slots_used(self, project_slots_used):
        """Sets the project_slots_used of this UsageDetail.


        :param project_slots_used: The project_slots_used of this UsageDetail.  # noqa: E501
        :type project_slots_used: int
        """

        self._project_slots_used = project_slots_used

    @property
    def credits_used(self):
        """Gets the credits_used of this UsageDetail.  # noqa: E501


        :return: The credits_used of this UsageDetail.  # noqa: E501
        :rtype: int
        """
        return self._credits_used

    @credits_used.setter
    def credits_used(self, credits_used):
        """Sets the credits_used of this UsageDetail.


        :param credits_used: The credits_used of this UsageDetail.  # noqa: E501
        :type credits_used: int
        """

        self._credits_used = credits_used

    def to_dict(self, serialize=False):
        """Returns the model properties as a dict"""
        result = {}

        def convert(x):
            if hasattr(x, "to_dict"):
                args = inspect.getargspec(x.to_dict).args
                if len(args) == 1:
                    return x.to_dict()
                else:
                    return x.to_dict(serialize)
            else:
                return x

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            attr = self.attribute_map.get(attr, attr) if serialize else attr
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: convert(x),
                    value
                ))
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], convert(item[1])),
                    value.items()
                ))
            else:
                result[attr] = convert(value)

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsageDetail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UsageDetail):
            return True

        return self.to_dict() != other.to_dict()
