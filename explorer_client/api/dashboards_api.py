# coding: utf-8

"""
    Gavagai Explorer API

    <p>This is the technical documentation for the Gavagai Explorer API.</p><p>We recommend that you get familiar with using <a href=\"https://explorer.gavagai.se/\">Gavagai Explorer</a> before you start developing with the API. The Explorer has its own <a href=\"https://gavagai-corp.github.io/explorer/\"> general documentation</a>.</p><p>Make sure that you understand the basic procedures, such as creating projects and uploading texts, exploring and refining your project, or creating reports and applying models. All functionality in Gavagai Explorer is built on this API, so you will have a much easier time understanding the different steps if you have already seen them in the Explorer web interface.</p> <p>The <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/99319872/Gavagai+Explorer+API+Tutorial\">Getting Started</a> tutorial and the <a href=\"https://gavagai.atlassian.net/wiki/spaces/PUB/pages/322797577/Explorer+API+Common+Use+Cases\"> Common Use Cases </a>section provide more guidance in understanding how the different API calls can be fitted together to create a workflow. The documentation below then provides full technical specifics for each endpoint.</p>  # noqa: E501

    The version of the OpenAPI document: 3
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from explorer_client.api_client import ApiClient
from explorer_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class DashboardsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_dashboard_graph(self, id, create_graph_request, **kwargs):  # noqa: E501
        """Create Graph  # noqa: E501

        Creates a graph in the dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_dashboard_graph(id, create_graph_request, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param create_graph_request: The graph creation request (required)
        :type create_graph_request: CreateGraphRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GraphInfo
        """
        kwargs['_return_http_data_only'] = True
        return self.create_dashboard_graph_with_http_info(id, create_graph_request, **kwargs)  # noqa: E501

    def create_dashboard_graph_with_http_info(self, id, create_graph_request, **kwargs):  # noqa: E501
        """Create Graph  # noqa: E501

        Creates a graph in the dashboard  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_dashboard_graph_with_http_info(id, create_graph_request, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param create_graph_request: The graph creation request (required)
        :type create_graph_request: CreateGraphRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GraphInfo, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'create_graph_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_dashboard_graph" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `create_dashboard_graph`")  # noqa: E501
        # verify the required parameter 'create_graph_request' is set
        if self.api_client.client_side_validation and ('create_graph_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['create_graph_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_graph_request` when calling `create_dashboard_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_graph_request' in local_var_params:
            body_params = local_var_params['create_graph_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "GraphInfo",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def create_topic_graph(self, id, topic_graph_create_request, **kwargs):  # noqa: E501
        """Create topic Graphs  # noqa: E501

        Creates a topic graph  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_topic_graph(id, topic_graph_create_request, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param topic_graph_create_request: The topic graph creation request (required)
        :type topic_graph_create_request: TopicGraphCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TopicGraphInfo
        """
        kwargs['_return_http_data_only'] = True
        return self.create_topic_graph_with_http_info(id, topic_graph_create_request, **kwargs)  # noqa: E501

    def create_topic_graph_with_http_info(self, id, topic_graph_create_request, **kwargs):  # noqa: E501
        """Create topic Graphs  # noqa: E501

        Creates a topic graph  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_topic_graph_with_http_info(id, topic_graph_create_request, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param topic_graph_create_request: The topic graph creation request (required)
        :type topic_graph_create_request: TopicGraphCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TopicGraphInfo, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'topic_graph_create_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_topic_graph" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `create_topic_graph`")  # noqa: E501
        # verify the required parameter 'topic_graph_create_request' is set
        if self.api_client.client_side_validation and ('topic_graph_create_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_graph_create_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_graph_create_request` when calling `create_topic_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'topic_graph_create_request' in local_var_params:
            body_params = local_var_params['topic_graph_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "TopicGraphInfo",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_dashboard_graph(self, id, graph_id, **kwargs):  # noqa: E501
        """Delete Graph  # noqa: E501

        Delete the created graph  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_dashboard_graph(id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_dashboard_graph_with_http_info(id, graph_id, **kwargs)  # noqa: E501

    def delete_dashboard_graph_with_http_info(self, id, graph_id, **kwargs):  # noqa: E501
        """Delete Graph  # noqa: E501

        Delete the created graph  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_dashboard_graph_with_http_info(id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dashboard_graph" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `delete_dashboard_graph`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `delete_dashboard_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/{graphId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def delete_topic_graph(self, id, graph_id, **kwargs):  # noqa: E501
        """Delete Topic Graph  # noqa: E501

        Delete the created topic graph  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_topic_graph(id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.delete_topic_graph_with_http_info(id, graph_id, **kwargs)  # noqa: E501

    def delete_topic_graph_with_http_info(self, id, graph_id, **kwargs):  # noqa: E501
        """Delete Topic Graph  # noqa: E501

        Delete the created topic graph  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_topic_graph_with_http_info(id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_topic_graph" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `delete_topic_graph`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `delete_topic_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_associations_timeseries_graph_data(self, id, topic_id, graph_id, **kwargs):  # noqa: E501
        """Get the Associations Timeseries graph data  # noqa: E501

        Get the Associations Timeseries graph data for a specific topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_associations_timeseries_graph_data(id, topic_id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AssociationsTimeseriesGraphResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_associations_timeseries_graph_data_with_http_info(id, topic_id, graph_id, **kwargs)  # noqa: E501

    def get_associations_timeseries_graph_data_with_http_info(self, id, topic_id, graph_id, **kwargs):  # noqa: E501
        """Get the Associations Timeseries graph data  # noqa: E501

        Get the Associations Timeseries graph data for a specific topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_associations_timeseries_graph_data_with_http_info(id, topic_id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AssociationsTimeseriesGraphResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'topic_id',
            'graph_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_associations_timeseries_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_associations_timeseries_graph_data`")  # noqa: E501
        # verify the required parameter 'topic_id' is set
        if self.api_client.client_side_validation and ('topic_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_id` when calling `get_associations_timeseries_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `get_associations_timeseries_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'topic_id' in local_var_params:
            path_params['topicId'] = local_var_params['topic_id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "AssociationsTimeseriesGraphResponse",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}/topics/{topicId}/associations_timeseries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_average_score_graph_data(self, id, graph_id, **kwargs):  # noqa: E501
        """Get AvgScore Graph  # noqa: E501

        Get the Average Score graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_average_score_graph_data(id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AverageScoreGraphResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_average_score_graph_data_with_http_info(id, graph_id, **kwargs)  # noqa: E501

    def get_average_score_graph_data_with_http_info(self, id, graph_id, **kwargs):  # noqa: E501
        """Get AvgScore Graph  # noqa: E501

        Get the Average Score graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_average_score_graph_data_with_http_info(id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AverageScoreGraphResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_average_score_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_average_score_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `get_average_score_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "AverageScoreGraphResponse",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/{graphId}/averagescore', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_average_score_matrix_graph_data(self, id, graph_id, **kwargs):  # noqa: E501
        """Get Average Score Matrix Data  # noqa: E501

        Get average score matrix graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_average_score_matrix_graph_data(id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: AverageScoreMatrixGraphResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_average_score_matrix_graph_data_with_http_info(id, graph_id, **kwargs)  # noqa: E501

    def get_average_score_matrix_graph_data_with_http_info(self, id, graph_id, **kwargs):  # noqa: E501
        """Get Average Score Matrix Data  # noqa: E501

        Get average score matrix graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_average_score_matrix_graph_data_with_http_info(id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(AverageScoreMatrixGraphResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_average_score_matrix_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_average_score_matrix_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `get_average_score_matrix_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "AverageScoreMatrixGraphResponse",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/{graphId}/averagescore_matrix', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_compiled_graph_share_data(self, id, **kwargs):  # noqa: E501
        """Retrieve the compiled graph data  # noqa: E501

        Retrieve the compiled graph data required needed for sharing the dashboards for the specified project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_compiled_graph_share_data(id, async_req=True)
        >>> result = thread.get()

        :param id: The project id for which the data is required (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CompiledGraphData
        """
        kwargs['_return_http_data_only'] = True
        return self.get_compiled_graph_share_data_with_http_info(id, **kwargs)  # noqa: E501

    def get_compiled_graph_share_data_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve the compiled graph data  # noqa: E501

        Retrieve the compiled graph data required needed for sharing the dashboards for the specified project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_compiled_graph_share_data_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The project id for which the data is required (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CompiledGraphData, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compiled_graph_share_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_compiled_graph_share_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "CompiledGraphData",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/sharedata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_compiled_graph_share_data_progress(self, id, **kwargs):  # noqa: E501
        """Retrieve the progress  # noqa: E501

        Retrieve the progress of the data compilation process for the specified project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_compiled_graph_share_data_progress(id, async_req=True)
        >>> result = thread.get()

        :param id: The project id for which the progress is required (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GraphDataProgress
        """
        kwargs['_return_http_data_only'] = True
        return self.get_compiled_graph_share_data_progress_with_http_info(id, **kwargs)  # noqa: E501

    def get_compiled_graph_share_data_progress_with_http_info(self, id, **kwargs):  # noqa: E501
        """Retrieve the progress  # noqa: E501

        Retrieve the progress of the data compilation process for the specified project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_compiled_graph_share_data_progress_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The project id for which the progress is required (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GraphDataProgress, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compiled_graph_share_data_progress" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_compiled_graph_share_data_progress`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "GraphDataProgress",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/sharedata/progress', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_graphs_for_project(self, id, **kwargs):  # noqa: E501
        """Get a list of graphs.  # noqa: E501

        Get average score matrix graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_graphs_for_project(id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GraphInfoResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_graphs_for_project_with_http_info(id, **kwargs)  # noqa: E501

    def get_graphs_for_project_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get a list of graphs.  # noqa: E501

        Get average score matrix graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_graphs_for_project_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GraphInfoResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_graphs_for_project" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_graphs_for_project`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "GraphInfoResponse",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_grouped_comparison_graph_context(self, id, **kwargs):  # noqa: E501
        """Get Grouped Comparison Graph Context  # noqa: E501

        Get grouped comparison graph context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_grouped_comparison_graph_context(id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ComparisonGraphContext
        """
        kwargs['_return_http_data_only'] = True
        return self.get_grouped_comparison_graph_context_with_http_info(id, **kwargs)  # noqa: E501

    def get_grouped_comparison_graph_context_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get Grouped Comparison Graph Context  # noqa: E501

        Get grouped comparison graph context  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_grouped_comparison_graph_context_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ComparisonGraphContext, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_grouped_comparison_graph_context" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_grouped_comparison_graph_context`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "ComparisonGraphContext",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/comparison_grouped_context', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_grouped_comparison_graph_data(self, id, graph_id, **kwargs):  # noqa: E501
        """Get Grouped Comparison Graph  # noqa: E501

        Get grouped comparison graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_grouped_comparison_graph_data(id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GroupedComparisonGraphResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_grouped_comparison_graph_data_with_http_info(id, graph_id, **kwargs)  # noqa: E501

    def get_grouped_comparison_graph_data_with_http_info(self, id, graph_id, **kwargs):  # noqa: E501
        """Get Grouped Comparison Graph  # noqa: E501

        Get grouped comparison graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_grouped_comparison_graph_data_with_http_info(id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GroupedComparisonGraphResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_grouped_comparison_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_grouped_comparison_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `get_grouped_comparison_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "GroupedComparisonGraphResponse",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/{graphId}/grouped_comparison', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_high_impact_association_graph_container(self, id, graph_id, **kwargs):  # noqa: E501
        """Get High Impact Topic Associations Graph  # noqa: E501

        Get the High Impact Topic Associations graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_high_impact_association_graph_container(id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: HighImpactAssociationsGraphResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_high_impact_association_graph_container_with_http_info(id, graph_id, **kwargs)  # noqa: E501

    def get_high_impact_association_graph_container_with_http_info(self, id, graph_id, **kwargs):  # noqa: E501
        """Get High Impact Topic Associations Graph  # noqa: E501

        Get the High Impact Topic Associations graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_high_impact_association_graph_container_with_http_info(id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(HighImpactAssociationsGraphResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_high_impact_association_graph_container" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_high_impact_association_graph_container`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `get_high_impact_association_graph_container`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "HighImpactAssociationsGraphResponse",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/{graphId}/highimpactassociation', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_high_impact_graph_data(self, id, graph_id, **kwargs):  # noqa: E501
        """Get High Impact Topics Graph  # noqa: E501

        Get the High Impact Topics graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_high_impact_graph_data(id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: HighImpactGraphResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_high_impact_graph_data_with_http_info(id, graph_id, **kwargs)  # noqa: E501

    def get_high_impact_graph_data_with_http_info(self, id, graph_id, **kwargs):  # noqa: E501
        """Get High Impact Topics Graph  # noqa: E501

        Get the High Impact Topics graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_high_impact_graph_data_with_http_info(id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(HighImpactGraphResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_high_impact_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_high_impact_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `get_high_impact_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "HighImpactGraphResponse",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/{graphId}/highimpact', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_net_sentiment_timeseries_graph_data(self, id, topic_id, graph_id, **kwargs):  # noqa: E501
        """Get the Net Sentiment Timeseries  # noqa: E501

        Get the Net Sentiment Timeseries graph data for a specific topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_net_sentiment_timeseries_graph_data(id, topic_id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: NetSentimentTimeseriesGraphResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_net_sentiment_timeseries_graph_data_with_http_info(id, topic_id, graph_id, **kwargs)  # noqa: E501

    def get_net_sentiment_timeseries_graph_data_with_http_info(self, id, topic_id, graph_id, **kwargs):  # noqa: E501
        """Get the Net Sentiment Timeseries  # noqa: E501

        Get the Net Sentiment Timeseries graph data for a specific topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_net_sentiment_timeseries_graph_data_with_http_info(id, topic_id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(NetSentimentTimeseriesGraphResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'topic_id',
            'graph_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_net_sentiment_timeseries_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_net_sentiment_timeseries_graph_data`")  # noqa: E501
        # verify the required parameter 'topic_id' is set
        if self.api_client.client_side_validation and ('topic_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_id` when calling `get_net_sentiment_timeseries_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `get_net_sentiment_timeseries_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'topic_id' in local_var_params:
            path_params['topicId'] = local_var_params['topic_id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "NetSentimentTimeseriesGraphResponse",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}/topics/{topicId}/netsentiment_timeseries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_timeseries_comparison_graph_data(self, id, graph_id, **kwargs):  # noqa: E501
        """Get Time Series Comparison Graph  # noqa: E501

        Get timeseries comparison graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_timeseries_comparison_graph_data(id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TimeseriesComparisonGraphResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_timeseries_comparison_graph_data_with_http_info(id, graph_id, **kwargs)  # noqa: E501

    def get_timeseries_comparison_graph_data_with_http_info(self, id, graph_id, **kwargs):  # noqa: E501
        """Get Time Series Comparison Graph  # noqa: E501

        Get timeseries comparison graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_timeseries_comparison_graph_data_with_http_info(id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TimeseriesComparisonGraphResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_timeseries_comparison_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_timeseries_comparison_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `get_timeseries_comparison_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "TimeseriesComparisonGraphResponse",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/{graphId}/timeseries_comparison', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_topic_associations_graph_data(self, id, topic_id, graph_id, **kwargs):  # noqa: E501
        """Get the association graph data  # noqa: E501

        Get the association graph data for a specific topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_topic_associations_graph_data(id, topic_id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TopicAssociationsGraphResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_topic_associations_graph_data_with_http_info(id, topic_id, graph_id, **kwargs)  # noqa: E501

    def get_topic_associations_graph_data_with_http_info(self, id, topic_id, graph_id, **kwargs):  # noqa: E501
        """Get the association graph data  # noqa: E501

        Get the association graph data for a specific topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_topic_associations_graph_data_with_http_info(id, topic_id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TopicAssociationsGraphResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'topic_id',
            'graph_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topic_associations_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_topic_associations_graph_data`")  # noqa: E501
        # verify the required parameter 'topic_id' is set
        if self.api_client.client_side_validation and ('topic_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_id` when calling `get_topic_associations_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `get_topic_associations_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'topic_id' in local_var_params:
            path_params['topicId'] = local_var_params['topic_id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "TopicAssociationsGraphResponse",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}/topics/{topicId}/associations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_topic_average_score_matrix_graph_data(self, id, topic_id, graph_id, **kwargs):  # noqa: E501
        """Get the average score matrix  # noqa: E501

        Get the average score matrix for the selected topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_topic_average_score_matrix_graph_data(id, topic_id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TopicAverageScoreMatrixGraphResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_topic_average_score_matrix_graph_data_with_http_info(id, topic_id, graph_id, **kwargs)  # noqa: E501

    def get_topic_average_score_matrix_graph_data_with_http_info(self, id, topic_id, graph_id, **kwargs):  # noqa: E501
        """Get the average score matrix  # noqa: E501

        Get the average score matrix for the selected topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_topic_average_score_matrix_graph_data_with_http_info(id, topic_id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TopicAverageScoreMatrixGraphResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'topic_id',
            'graph_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topic_average_score_matrix_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_topic_average_score_matrix_graph_data`")  # noqa: E501
        # verify the required parameter 'topic_id' is set
        if self.api_client.client_side_validation and ('topic_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_id` when calling `get_topic_average_score_matrix_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `get_topic_average_score_matrix_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'topic_id' in local_var_params:
            path_params['topicId'] = local_var_params['topic_id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "TopicAverageScoreMatrixGraphResponse",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}/topics/{topicId}/averagescore_matrix', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_topic_graphs(self, id, **kwargs):  # noqa: E501
        """Get topic Graphs  # noqa: E501

        Get a list of topic graphs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_topic_graphs(id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TopicGraphInfoResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_topic_graphs_with_http_info(id, **kwargs)  # noqa: E501

    def get_topic_graphs_with_http_info(self, id, **kwargs):  # noqa: E501
        """Get topic Graphs  # noqa: E501

        Get a list of topic graphs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_topic_graphs_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TopicGraphInfoResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topic_graphs" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_topic_graphs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "TopicGraphInfoResponse",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_topic_information_graph_data(self, id, topic_id, graph_id, **kwargs):  # noqa: E501
        """Get the topic information graph  # noqa: E501

        Get the topic information graph for the selected topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_topic_information_graph_data(id, topic_id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TopicInformationGraphResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_topic_information_graph_data_with_http_info(id, topic_id, graph_id, **kwargs)  # noqa: E501

    def get_topic_information_graph_data_with_http_info(self, id, topic_id, graph_id, **kwargs):  # noqa: E501
        """Get the topic information graph  # noqa: E501

        Get the topic information graph for the selected topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_topic_information_graph_data_with_http_info(id, topic_id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TopicInformationGraphResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'topic_id',
            'graph_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topic_information_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_topic_information_graph_data`")  # noqa: E501
        # verify the required parameter 'topic_id' is set
        if self.api_client.client_side_validation and ('topic_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_id` when calling `get_topic_information_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `get_topic_information_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'topic_id' in local_var_params:
            path_params['topicId'] = local_var_params['topic_id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "TopicInformationGraphResponse",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}/topics/{topicId}/topic_information', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def get_topic_text_examples(self, id, topic_id, graph_id, **kwargs):  # noqa: E501
        """Get the text examples for the selected topic  # noqa: E501

        Get the text examples for the selected topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_topic_text_examples(id, topic_id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TopicTextExamplesGraphResponse
        """
        kwargs['_return_http_data_only'] = True
        return self.get_topic_text_examples_with_http_info(id, topic_id, graph_id, **kwargs)  # noqa: E501

    def get_topic_text_examples_with_http_info(self, id, topic_id, graph_id, **kwargs):  # noqa: E501
        """Get the text examples for the selected topic  # noqa: E501

        Get the text examples for the selected topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_topic_text_examples_with_http_info(id, topic_id, graph_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TopicTextExamplesGraphResponse, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'topic_id',
            'graph_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_topic_text_examples" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_topic_text_examples`")  # noqa: E501
        # verify the required parameter 'topic_id' is set
        if self.api_client.client_side_validation and ('topic_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_id` when calling `get_topic_text_examples`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `get_topic_text_examples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'topic_id' in local_var_params:
            path_params['topicId'] = local_var_params['topic_id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "TopicTextExamplesGraphResponse",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}/topics/{topicId}/text_examples', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def initialize_dashboard(self, id, **kwargs):  # noqa: E501
        """Initialize Dashboard  # noqa: E501

        Initialize the dashboard with all the default graphs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.initialize_dashboard(id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.initialize_dashboard_with_http_info(id, **kwargs)  # noqa: E501

    def initialize_dashboard_with_http_info(self, id, **kwargs):  # noqa: E501
        """Initialize Dashboard  # noqa: E501

        Initialize the dashboard with all the default graphs  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.initialize_dashboard_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method initialize_dashboard" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `initialize_dashboard`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/initialize', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def modify_dashboard_graph(self, id, graph_id, create_graph_request, **kwargs):  # noqa: E501
        """Update Graph  # noqa: E501

        Modifies the the graph  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.modify_dashboard_graph(id, graph_id, create_graph_request, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param create_graph_request: The graph update request (required)
        :type create_graph_request: CreateGraphRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: GraphInfo
        """
        kwargs['_return_http_data_only'] = True
        return self.modify_dashboard_graph_with_http_info(id, graph_id, create_graph_request, **kwargs)  # noqa: E501

    def modify_dashboard_graph_with_http_info(self, id, graph_id, create_graph_request, **kwargs):  # noqa: E501
        """Update Graph  # noqa: E501

        Modifies the the graph  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.modify_dashboard_graph_with_http_info(id, graph_id, create_graph_request, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param create_graph_request: The graph update request (required)
        :type create_graph_request: CreateGraphRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(GraphInfo, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'create_graph_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method modify_dashboard_graph" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `modify_dashboard_graph`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `modify_dashboard_graph`")  # noqa: E501
        # verify the required parameter 'create_graph_request' is set
        if self.api_client.client_side_validation and ('create_graph_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['create_graph_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `create_graph_request` when calling `modify_dashboard_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'create_graph_request' in local_var_params:
            body_params = local_var_params['create_graph_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "GraphInfo",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/{graphId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def set_associations_timeseries_graph_context(self, id, graph_id, associations_timeseries_graph_context, **kwargs):  # noqa: E501
        """Update the context of the Associations Timeseries graph data  # noqa: E501

        Put the context of the Associations Timeseries graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_associations_timeseries_graph_context(id, graph_id, associations_timeseries_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param associations_timeseries_graph_context: The request body (required)
        :type associations_timeseries_graph_context: AssociationsTimeseriesGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.set_associations_timeseries_graph_context_with_http_info(id, graph_id, associations_timeseries_graph_context, **kwargs)  # noqa: E501

    def set_associations_timeseries_graph_context_with_http_info(self, id, graph_id, associations_timeseries_graph_context, **kwargs):  # noqa: E501
        """Update the context of the Associations Timeseries graph data  # noqa: E501

        Put the context of the Associations Timeseries graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_associations_timeseries_graph_context_with_http_info(id, graph_id, associations_timeseries_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param associations_timeseries_graph_context: The request body (required)
        :type associations_timeseries_graph_context: AssociationsTimeseriesGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'associations_timeseries_graph_context'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_associations_timeseries_graph_context" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `set_associations_timeseries_graph_context`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `set_associations_timeseries_graph_context`")  # noqa: E501
        # verify the required parameter 'associations_timeseries_graph_context' is set
        if self.api_client.client_side_validation and ('associations_timeseries_graph_context' not in local_var_params or  # noqa: E501
                                                        local_var_params['associations_timeseries_graph_context'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `associations_timeseries_graph_context` when calling `set_associations_timeseries_graph_context`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'associations_timeseries_graph_context' in local_var_params:
            body_params = local_var_params['associations_timeseries_graph_context']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}/associations_timeseries', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def set_net_sentiment_timeseries_graph_context(self, id, graph_id, net_sentiment_timeseries_graph_context, **kwargs):  # noqa: E501
        """Update Net Sentiment Timeseries Context  # noqa: E501

        Put the context of the Net Sentiment Timeseries graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_net_sentiment_timeseries_graph_context(id, graph_id, net_sentiment_timeseries_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param net_sentiment_timeseries_graph_context: The request body (required)
        :type net_sentiment_timeseries_graph_context: NetSentimentTimeseriesGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.set_net_sentiment_timeseries_graph_context_with_http_info(id, graph_id, net_sentiment_timeseries_graph_context, **kwargs)  # noqa: E501

    def set_net_sentiment_timeseries_graph_context_with_http_info(self, id, graph_id, net_sentiment_timeseries_graph_context, **kwargs):  # noqa: E501
        """Update Net Sentiment Timeseries Context  # noqa: E501

        Put the context of the Net Sentiment Timeseries graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_net_sentiment_timeseries_graph_context_with_http_info(id, graph_id, net_sentiment_timeseries_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param net_sentiment_timeseries_graph_context: The request body (required)
        :type net_sentiment_timeseries_graph_context: NetSentimentTimeseriesGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'net_sentiment_timeseries_graph_context'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_net_sentiment_timeseries_graph_context" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `set_net_sentiment_timeseries_graph_context`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `set_net_sentiment_timeseries_graph_context`")  # noqa: E501
        # verify the required parameter 'net_sentiment_timeseries_graph_context' is set
        if self.api_client.client_side_validation and ('net_sentiment_timeseries_graph_context' not in local_var_params or  # noqa: E501
                                                        local_var_params['net_sentiment_timeseries_graph_context'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `net_sentiment_timeseries_graph_context` when calling `set_net_sentiment_timeseries_graph_context`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'net_sentiment_timeseries_graph_context' in local_var_params:
            body_params = local_var_params['net_sentiment_timeseries_graph_context']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}/netsentiment_timeseries', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def set_topic_average_score_matrix_graph_context(self, id, graph_id, topic_average_score_matrix_graph_context, **kwargs):  # noqa: E501
        """Put the context of the Average Score Matrix  # noqa: E501

        Put the context of the Average Score Matrix graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_topic_average_score_matrix_graph_context(id, graph_id, topic_average_score_matrix_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_average_score_matrix_graph_context: The request body (required)
        :type topic_average_score_matrix_graph_context: TopicAverageScoreMatrixGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.set_topic_average_score_matrix_graph_context_with_http_info(id, graph_id, topic_average_score_matrix_graph_context, **kwargs)  # noqa: E501

    def set_topic_average_score_matrix_graph_context_with_http_info(self, id, graph_id, topic_average_score_matrix_graph_context, **kwargs):  # noqa: E501
        """Put the context of the Average Score Matrix  # noqa: E501

        Put the context of the Average Score Matrix graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_topic_average_score_matrix_graph_context_with_http_info(id, graph_id, topic_average_score_matrix_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_average_score_matrix_graph_context: The request body (required)
        :type topic_average_score_matrix_graph_context: TopicAverageScoreMatrixGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'topic_average_score_matrix_graph_context'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_topic_average_score_matrix_graph_context" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `set_topic_average_score_matrix_graph_context`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `set_topic_average_score_matrix_graph_context`")  # noqa: E501
        # verify the required parameter 'topic_average_score_matrix_graph_context' is set
        if self.api_client.client_side_validation and ('topic_average_score_matrix_graph_context' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_average_score_matrix_graph_context'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_average_score_matrix_graph_context` when calling `set_topic_average_score_matrix_graph_context`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'topic_average_score_matrix_graph_context' in local_var_params:
            body_params = local_var_params['topic_average_score_matrix_graph_context']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}/averagescore_matrix', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def set_topic_information_graph_context(self, id, graph_id, topic_information_graph_context, **kwargs):  # noqa: E501
        """Put the context of the Topic Information graph data  # noqa: E501

        Put the context of the Topic Information graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_topic_information_graph_context(id, graph_id, topic_information_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_information_graph_context: The request body (required)
        :type topic_information_graph_context: TopicInformationGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.set_topic_information_graph_context_with_http_info(id, graph_id, topic_information_graph_context, **kwargs)  # noqa: E501

    def set_topic_information_graph_context_with_http_info(self, id, graph_id, topic_information_graph_context, **kwargs):  # noqa: E501
        """Put the context of the Topic Information graph data  # noqa: E501

        Put the context of the Topic Information graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_topic_information_graph_context_with_http_info(id, graph_id, topic_information_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_information_graph_context: The request body (required)
        :type topic_information_graph_context: TopicInformationGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'topic_information_graph_context'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_topic_information_graph_context" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `set_topic_information_graph_context`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `set_topic_information_graph_context`")  # noqa: E501
        # verify the required parameter 'topic_information_graph_context' is set
        if self.api_client.client_side_validation and ('topic_information_graph_context' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_information_graph_context'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_information_graph_context` when calling `set_topic_information_graph_context`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'topic_information_graph_context' in local_var_params:
            body_params = local_var_params['topic_information_graph_context']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}/topic_information', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def set_topic_text_examples_context(self, id, graph_id, topic_text_examples_graph_context, **kwargs):  # noqa: E501
        """Put the context of the Topic Text examples graph data  # noqa: E501

        Put the context of the Topic Text examples graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_topic_text_examples_context(id, graph_id, topic_text_examples_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_text_examples_graph_context: The request body (required)
        :type topic_text_examples_graph_context: TopicTextExamplesGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.set_topic_text_examples_context_with_http_info(id, graph_id, topic_text_examples_graph_context, **kwargs)  # noqa: E501

    def set_topic_text_examples_context_with_http_info(self, id, graph_id, topic_text_examples_graph_context, **kwargs):  # noqa: E501
        """Put the context of the Topic Text examples graph data  # noqa: E501

        Put the context of the Topic Text examples graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.set_topic_text_examples_context_with_http_info(id, graph_id, topic_text_examples_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_text_examples_graph_context: The request body (required)
        :type topic_text_examples_graph_context: TopicTextExamplesGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'topic_text_examples_graph_context'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_topic_text_examples_context" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `set_topic_text_examples_context`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `set_topic_text_examples_context`")  # noqa: E501
        # verify the required parameter 'topic_text_examples_graph_context' is set
        if self.api_client.client_side_validation and ('topic_text_examples_graph_context' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_text_examples_graph_context'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_text_examples_graph_context` when calling `set_topic_text_examples_context`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'topic_text_examples_graph_context' in local_var_params:
            body_params = local_var_params['topic_text_examples_graph_context']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}/text_examples', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def start_associations_timeseries_graph_data(self, id, graph_id, topic_id, **kwargs):  # noqa: E501
        """Start the Associations Timeseries  # noqa: E501

        Start the Associations Timeseries graph data for a specific topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_associations_timeseries_graph_data(id, graph_id, topic_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.start_associations_timeseries_graph_data_with_http_info(id, graph_id, topic_id, **kwargs)  # noqa: E501

    def start_associations_timeseries_graph_data_with_http_info(self, id, graph_id, topic_id, **kwargs):  # noqa: E501
        """Start the Associations Timeseries  # noqa: E501

        Start the Associations Timeseries graph data for a specific topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_associations_timeseries_graph_data_with_http_info(id, graph_id, topic_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'topic_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_associations_timeseries_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `start_associations_timeseries_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `start_associations_timeseries_graph_data`")  # noqa: E501
        # verify the required parameter 'topic_id' is set
        if self.api_client.client_side_validation and ('topic_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_id` when calling `start_associations_timeseries_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501
        if 'topic_id' in local_var_params:
            path_params['topicId'] = local_var_params['topic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}/topics/{topicId}/associations_timeseries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def start_average_score_graph_data(self, id, graph_id, average_score_graph_context, **kwargs):  # noqa: E501
        """Start AvgScore Calculation  # noqa: E501

        Starts the process of generating Average Score graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_average_score_graph_data(id, graph_id, average_score_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param average_score_graph_context: The request body (required)
        :type average_score_graph_context: AverageScoreGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.start_average_score_graph_data_with_http_info(id, graph_id, average_score_graph_context, **kwargs)  # noqa: E501

    def start_average_score_graph_data_with_http_info(self, id, graph_id, average_score_graph_context, **kwargs):  # noqa: E501
        """Start AvgScore Calculation  # noqa: E501

        Starts the process of generating Average Score graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_average_score_graph_data_with_http_info(id, graph_id, average_score_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param average_score_graph_context: The request body (required)
        :type average_score_graph_context: AverageScoreGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'average_score_graph_context'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_average_score_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `start_average_score_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `start_average_score_graph_data`")  # noqa: E501
        # verify the required parameter 'average_score_graph_context' is set
        if self.api_client.client_side_validation and ('average_score_graph_context' not in local_var_params or  # noqa: E501
                                                        local_var_params['average_score_graph_context'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `average_score_graph_context` when calling `start_average_score_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'average_score_graph_context' in local_var_params:
            body_params = local_var_params['average_score_graph_context']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/{graphId}/averagescore', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def start_average_score_matrix_graph_data(self, id, graph_id, average_score_matrix_graph_context, **kwargs):  # noqa: E501
        """Start Average Score Matrix Calculation  # noqa: E501

        Starts the process of generating average score matrix graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_average_score_matrix_graph_data(id, graph_id, average_score_matrix_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param average_score_matrix_graph_context: The request body (required)
        :type average_score_matrix_graph_context: AverageScoreMatrixGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.start_average_score_matrix_graph_data_with_http_info(id, graph_id, average_score_matrix_graph_context, **kwargs)  # noqa: E501

    def start_average_score_matrix_graph_data_with_http_info(self, id, graph_id, average_score_matrix_graph_context, **kwargs):  # noqa: E501
        """Start Average Score Matrix Calculation  # noqa: E501

        Starts the process of generating average score matrix graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_average_score_matrix_graph_data_with_http_info(id, graph_id, average_score_matrix_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param average_score_matrix_graph_context: The request body (required)
        :type average_score_matrix_graph_context: AverageScoreMatrixGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'average_score_matrix_graph_context'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_average_score_matrix_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `start_average_score_matrix_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `start_average_score_matrix_graph_data`")  # noqa: E501
        # verify the required parameter 'average_score_matrix_graph_context' is set
        if self.api_client.client_side_validation and ('average_score_matrix_graph_context' not in local_var_params or  # noqa: E501
                                                        local_var_params['average_score_matrix_graph_context'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `average_score_matrix_graph_context` when calling `start_average_score_matrix_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'average_score_matrix_graph_context' in local_var_params:
            body_params = local_var_params['average_score_matrix_graph_context']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/{graphId}/averagescore_matrix', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def start_compile_graph_share_data(self, id, **kwargs):  # noqa: E501
        """Start Compiling Dashboard graphs  # noqa: E501

        Start the process that compiles graph data needed for sharing the dashboards for the specified project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_compile_graph_share_data(id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.start_compile_graph_share_data_with_http_info(id, **kwargs)  # noqa: E501

    def start_compile_graph_share_data_with_http_info(self, id, **kwargs):  # noqa: E501
        """Start Compiling Dashboard graphs  # noqa: E501

        Start the process that compiles graph data needed for sharing the dashboards for the specified project  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_compile_graph_share_data_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_compile_graph_share_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `start_compile_graph_share_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/sharedata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def start_grouped_comparison_graph_data(self, id, graph_id, grouped_comparison_graph_context, **kwargs):  # noqa: E501
        """Start Grouped Comparison Calculation  # noqa: E501

        Starts the process of generating grouped comparison graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_grouped_comparison_graph_data(id, graph_id, grouped_comparison_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param grouped_comparison_graph_context: The request body (required)
        :type grouped_comparison_graph_context: GroupedComparisonGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.start_grouped_comparison_graph_data_with_http_info(id, graph_id, grouped_comparison_graph_context, **kwargs)  # noqa: E501

    def start_grouped_comparison_graph_data_with_http_info(self, id, graph_id, grouped_comparison_graph_context, **kwargs):  # noqa: E501
        """Start Grouped Comparison Calculation  # noqa: E501

        Starts the process of generating grouped comparison graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_grouped_comparison_graph_data_with_http_info(id, graph_id, grouped_comparison_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param grouped_comparison_graph_context: The request body (required)
        :type grouped_comparison_graph_context: GroupedComparisonGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'grouped_comparison_graph_context'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_grouped_comparison_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `start_grouped_comparison_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `start_grouped_comparison_graph_data`")  # noqa: E501
        # verify the required parameter 'grouped_comparison_graph_context' is set
        if self.api_client.client_side_validation and ('grouped_comparison_graph_context' not in local_var_params or  # noqa: E501
                                                        local_var_params['grouped_comparison_graph_context'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `grouped_comparison_graph_context` when calling `start_grouped_comparison_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'grouped_comparison_graph_context' in local_var_params:
            body_params = local_var_params['grouped_comparison_graph_context']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/{graphId}/grouped_comparison', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def start_high_impact_association_graph_container(self, id, graph_id, high_impact_associations_graph_context, **kwargs):  # noqa: E501
        """Start High Impact Topic Associations Calculation  # noqa: E501

        Starts the process of generating High Impact Topic Associations graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_high_impact_association_graph_container(id, graph_id, high_impact_associations_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param high_impact_associations_graph_context: The request body (required)
        :type high_impact_associations_graph_context: HighImpactAssociationsGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.start_high_impact_association_graph_container_with_http_info(id, graph_id, high_impact_associations_graph_context, **kwargs)  # noqa: E501

    def start_high_impact_association_graph_container_with_http_info(self, id, graph_id, high_impact_associations_graph_context, **kwargs):  # noqa: E501
        """Start High Impact Topic Associations Calculation  # noqa: E501

        Starts the process of generating High Impact Topic Associations graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_high_impact_association_graph_container_with_http_info(id, graph_id, high_impact_associations_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param high_impact_associations_graph_context: The request body (required)
        :type high_impact_associations_graph_context: HighImpactAssociationsGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'high_impact_associations_graph_context'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_high_impact_association_graph_container" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `start_high_impact_association_graph_container`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `start_high_impact_association_graph_container`")  # noqa: E501
        # verify the required parameter 'high_impact_associations_graph_context' is set
        if self.api_client.client_side_validation and ('high_impact_associations_graph_context' not in local_var_params or  # noqa: E501
                                                        local_var_params['high_impact_associations_graph_context'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `high_impact_associations_graph_context` when calling `start_high_impact_association_graph_container`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'high_impact_associations_graph_context' in local_var_params:
            body_params = local_var_params['high_impact_associations_graph_context']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/{graphId}/highimpactassociation', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def start_high_impact_graph_data(self, id, graph_id, high_impact_graph_context, **kwargs):  # noqa: E501
        """Start High Impact Topic Calculation  # noqa: E501

        Starts the process of generating High Impact Topics graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_high_impact_graph_data(id, graph_id, high_impact_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param high_impact_graph_context: The request body (required)
        :type high_impact_graph_context: HighImpactGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.start_high_impact_graph_data_with_http_info(id, graph_id, high_impact_graph_context, **kwargs)  # noqa: E501

    def start_high_impact_graph_data_with_http_info(self, id, graph_id, high_impact_graph_context, **kwargs):  # noqa: E501
        """Start High Impact Topic Calculation  # noqa: E501

        Starts the process of generating High Impact Topics graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_high_impact_graph_data_with_http_info(id, graph_id, high_impact_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param high_impact_graph_context: The request body (required)
        :type high_impact_graph_context: HighImpactGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'high_impact_graph_context'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_high_impact_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `start_high_impact_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `start_high_impact_graph_data`")  # noqa: E501
        # verify the required parameter 'high_impact_graph_context' is set
        if self.api_client.client_side_validation and ('high_impact_graph_context' not in local_var_params or  # noqa: E501
                                                        local_var_params['high_impact_graph_context'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `high_impact_graph_context` when calling `start_high_impact_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'high_impact_graph_context' in local_var_params:
            body_params = local_var_params['high_impact_graph_context']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/{graphId}/highimpact', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def start_net_sentiment_timeseries_graph_data(self, id, graph_id, topic_id, **kwargs):  # noqa: E501
        """Start the Net Sentiment Timeseries  # noqa: E501

        Start the process of generating Net Sentiment Timeseries graph data for a specific topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_net_sentiment_timeseries_graph_data(id, graph_id, topic_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.start_net_sentiment_timeseries_graph_data_with_http_info(id, graph_id, topic_id, **kwargs)  # noqa: E501

    def start_net_sentiment_timeseries_graph_data_with_http_info(self, id, graph_id, topic_id, **kwargs):  # noqa: E501
        """Start the Net Sentiment Timeseries  # noqa: E501

        Start the process of generating Net Sentiment Timeseries graph data for a specific topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_net_sentiment_timeseries_graph_data_with_http_info(id, graph_id, topic_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'topic_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_net_sentiment_timeseries_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `start_net_sentiment_timeseries_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `start_net_sentiment_timeseries_graph_data`")  # noqa: E501
        # verify the required parameter 'topic_id' is set
        if self.api_client.client_side_validation and ('topic_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_id` when calling `start_net_sentiment_timeseries_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501
        if 'topic_id' in local_var_params:
            path_params['topicId'] = local_var_params['topic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}/topics/{topicId}/netsentiment_timeseries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def start_timeseries_comparison_graph_data(self, id, graph_id, timeseries_comparison_graph_context, **kwargs):  # noqa: E501
        """Start Time Series Comparison Calculation  # noqa: E501

        Starts the process of generating time series comparison graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_timeseries_comparison_graph_data(id, graph_id, timeseries_comparison_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param timeseries_comparison_graph_context: The the request (required)
        :type timeseries_comparison_graph_context: TimeseriesComparisonGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.start_timeseries_comparison_graph_data_with_http_info(id, graph_id, timeseries_comparison_graph_context, **kwargs)  # noqa: E501

    def start_timeseries_comparison_graph_data_with_http_info(self, id, graph_id, timeseries_comparison_graph_context, **kwargs):  # noqa: E501
        """Start Time Series Comparison Calculation  # noqa: E501

        Starts the process of generating time series comparison graph data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_timeseries_comparison_graph_data_with_http_info(id, graph_id, timeseries_comparison_graph_context, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param timeseries_comparison_graph_context: The the request (required)
        :type timeseries_comparison_graph_context: TimeseriesComparisonGraphContext
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'timeseries_comparison_graph_context'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_timeseries_comparison_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `start_timeseries_comparison_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `start_timeseries_comparison_graph_data`")  # noqa: E501
        # verify the required parameter 'timeseries_comparison_graph_context' is set
        if self.api_client.client_side_validation and ('timeseries_comparison_graph_context' not in local_var_params or  # noqa: E501
                                                        local_var_params['timeseries_comparison_graph_context'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `timeseries_comparison_graph_context` when calling `start_timeseries_comparison_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'timeseries_comparison_graph_context' in local_var_params:
            body_params = local_var_params['timeseries_comparison_graph_context']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/graphs/{graphId}/timeseries_comparison', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def start_topic_average_score_matrix_graph_data(self, id, graph_id, topic_id, **kwargs):  # noqa: E501
        """Start the computation of the Average Score Matrix  # noqa: E501

        Start the computation of the Average Score Matrix graph data for a specific topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_topic_average_score_matrix_graph_data(id, graph_id, topic_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.start_topic_average_score_matrix_graph_data_with_http_info(id, graph_id, topic_id, **kwargs)  # noqa: E501

    def start_topic_average_score_matrix_graph_data_with_http_info(self, id, graph_id, topic_id, **kwargs):  # noqa: E501
        """Start the computation of the Average Score Matrix  # noqa: E501

        Start the computation of the Average Score Matrix graph data for a specific topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_topic_average_score_matrix_graph_data_with_http_info(id, graph_id, topic_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'topic_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_topic_average_score_matrix_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `start_topic_average_score_matrix_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `start_topic_average_score_matrix_graph_data`")  # noqa: E501
        # verify the required parameter 'topic_id' is set
        if self.api_client.client_side_validation and ('topic_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_id` when calling `start_topic_average_score_matrix_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501
        if 'topic_id' in local_var_params:
            path_params['topicId'] = local_var_params['topic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}/topics/{topicId}/averagescore_matrix', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def start_topic_information_graph_data(self, id, graph_id, topic_id, **kwargs):  # noqa: E501
        """Start the computation of the Topic Information  # noqa: E501

        Start the computation of the Topic Information graph data for a specific topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_topic_information_graph_data(id, graph_id, topic_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.start_topic_information_graph_data_with_http_info(id, graph_id, topic_id, **kwargs)  # noqa: E501

    def start_topic_information_graph_data_with_http_info(self, id, graph_id, topic_id, **kwargs):  # noqa: E501
        """Start the computation of the Topic Information  # noqa: E501

        Start the computation of the Topic Information graph data for a specific topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_topic_information_graph_data_with_http_info(id, graph_id, topic_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'topic_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_topic_information_graph_data" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `start_topic_information_graph_data`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `start_topic_information_graph_data`")  # noqa: E501
        # verify the required parameter 'topic_id' is set
        if self.api_client.client_side_validation and ('topic_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_id` when calling `start_topic_information_graph_data`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501
        if 'topic_id' in local_var_params:
            path_params['topicId'] = local_var_params['topic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}/topics/{topicId}/topic_information', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def start_topic_text_examples(self, id, graph_id, topic_id, **kwargs):  # noqa: E501
        """Start the computation of the Topic Text  # noqa: E501

        Start the computation of the Topic Text examples graph data for a specific topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_topic_text_examples(id, graph_id, topic_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """
        kwargs['_return_http_data_only'] = True
        return self.start_topic_text_examples_with_http_info(id, graph_id, topic_id, **kwargs)  # noqa: E501

    def start_topic_text_examples_with_http_info(self, id, graph_id, topic_id, **kwargs):  # noqa: E501
        """Start the computation of the Topic Text  # noqa: E501

        Start the computation of the Topic Text examples graph data for a specific topic  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.start_topic_text_examples_with_http_info(id, graph_id, topic_id, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_id: The topic identifier (required)
        :type topic_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: None
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'topic_id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_topic_text_examples" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `start_topic_text_examples`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `start_topic_text_examples`")  # noqa: E501
        # verify the required parameter 'topic_id' is set
        if self.api_client.client_side_validation and ('topic_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_id` when calling `start_topic_text_examples`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501
        if 'topic_id' in local_var_params:
            path_params['topicId'] = local_var_params['topic_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {}

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}/topics/{topicId}/text_examples', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))

    def update_topic_graph(self, id, graph_id, topic_graph_create_request, **kwargs):  # noqa: E501
        """Update topic Graphs  # noqa: E501

        Modifies the topic graph  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_topic_graph(id, graph_id, topic_graph_create_request, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_graph_create_request: The topic graph update request (required)
        :type topic_graph_create_request: TopicGraphCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: TopicGraphInfo
        """
        kwargs['_return_http_data_only'] = True
        return self.update_topic_graph_with_http_info(id, graph_id, topic_graph_create_request, **kwargs)  # noqa: E501

    def update_topic_graph_with_http_info(self, id, graph_id, topic_graph_create_request, **kwargs):  # noqa: E501
        """Update topic Graphs  # noqa: E501

        Modifies the topic graph  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_topic_graph_with_http_info(id, graph_id, topic_graph_create_request, async_req=True)
        >>> result = thread.get()

        :param id: The project identifier (required)
        :type id: int
        :param graph_id: The graph identifier (required)
        :type graph_id: str
        :param topic_graph_create_request: The topic graph update request (required)
        :type topic_graph_create_request: TopicGraphCreateRequest
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _return_http_data_only: response data without head status code
                                       and headers
        :type _return_http_data_only: bool, optional
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :type _preload_content: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(TopicGraphInfo, status_code(int), headers(HTTPHeaderDict))
        """

        local_var_params = locals()

        all_params = [
            'id',
            'graph_id',
            'topic_graph_create_request'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_topic_graph" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `update_topic_graph`")  # noqa: E501
        # verify the required parameter 'graph_id' is set
        if self.api_client.client_side_validation and ('graph_id' not in local_var_params or  # noqa: E501
                                                        local_var_params['graph_id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `graph_id` when calling `update_topic_graph`")  # noqa: E501
        # verify the required parameter 'topic_graph_create_request' is set
        if self.api_client.client_side_validation and ('topic_graph_create_request' not in local_var_params or  # noqa: E501
                                                        local_var_params['topic_graph_create_request'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `topic_graph_create_request` when calling `update_topic_graph`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501
        if 'graph_id' in local_var_params:
            path_params['graphId'] = local_var_params['graph_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'topic_graph_create_request' in local_var_params:
            body_params = local_var_params['topic_graph_create_request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501
        
        response_types_map = {
            200: "TopicGraphInfo",
        }

        return self.api_client.call_api(
            '/projects/{id}/explore/dashboard/topic_graphs/{graphId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_types_map=response_types_map,
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats,
            _request_auth=local_var_params.get('_request_auth'))
